import "react-native";
import AccountReducer, { defaultAccountState } from "../Account/Reducers";
import SendReducer, { defaultSendState } from "../Send/Reducers";
import { TypeKeys } from "../ActionTypes";
const transaction = {
    name: "David",
    email: "David.conor.m@gmail.com",
    amount: "100"
};
describe("Account reducer should function correctly", () => {
    it("should add a transaction to our list", () => {
        const account = AccountReducer(defaultAccountState(), {
            type: TypeKeys.SEND_MONEY_SUCCESS,
            transaction
        });
        expect(account.transations).toEqual([transaction]);
    });
    it("should add ammount to our send total", () => {
        const state = defaultAccountState();
        const account = AccountReducer(state, {
            type: TypeKeys.SEND_MONEY_SUCCESS,
            transaction
        });
        expect(account.totalSent).toEqual(state.totalSent + +transaction.amount);
    });
    it("should remove ammount from out total", () => {
        const state = defaultAccountState();
        const account = AccountReducer(state, {
            type: TypeKeys.SEND_MONEY_SUCCESS,
            transaction
        });
        expect(account.totalAvailable).toEqual(state.totalAvailable - +transaction.amount);
    });
});
describe("ASend reducer should function correctly", () => {
    it("should stop loading on success", () => {
        const send = SendReducer(defaultSendState(), {
            type: TypeKeys.SEND_MONEY_SUCCESS,
            transaction
        });
        expect(send.loading).toEqual(false);
    });
    it("should start loading on send", () => {
        const send = SendReducer(defaultSendState(), {
            type: TypeKeys.SEND_MONEY,
            transaction
        });
        expect(send.loading).toEqual(true);
    });
    it("should stop loading on fail", () => {
        const send = SendReducer(defaultSendState(), {
            type: TypeKeys.SEND_MONEY_FAIL
        });
        expect(send.loading).toEqual(false);
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2RhdmlkbXVycGh5L0Rlc2t0b3AvTW9uZXlTZW5kZXIvc3JjL19fdGVzdHNfXy9Gb3JtUmVkdWNlclRlc3RzLnRzeCIsIm1hcHBpbmdzIjoiQUFBQSxPQUFPLGNBQWMsQ0FBQztBQUN0QixPQUFPLGNBQWMsRUFBRSxFQUFFLG1CQUFtQixFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDMUUsT0FBTyxXQUFXLEVBQUUsRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBQ2pFLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUUxQyxNQUFNLFdBQVcsR0FBRztJQUNsQixJQUFJLEVBQUUsT0FBTztJQUNiLEtBQUssRUFBRSx5QkFBeUI7SUFDaEMsTUFBTSxFQUFFLEtBQUs7Q0FDZCxDQUFDO0FBRUYsUUFBUSxDQUFDLDJDQUEyQyxFQUFFLEdBQUcsRUFBRTtJQUN6RCxFQUFFLENBQUMsc0NBQXNDLEVBQUUsR0FBRyxFQUFFO1FBQzlDLE1BQU0sT0FBTyxHQUFHLGNBQWMsQ0FBQyxtQkFBbUIsRUFBRSxFQUFFO1lBQ3BELElBQUksRUFBRSxRQUFRLENBQUMsa0JBQWtCO1lBQ2pDLFdBQVc7U0FDWixDQUFDLENBQUM7UUFDSCxNQUFNLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUM7SUFDckQsQ0FBQyxDQUFDLENBQUM7SUFFSCxFQUFFLENBQUMsc0NBQXNDLEVBQUUsR0FBRyxFQUFFO1FBQzlDLE1BQU0sS0FBSyxHQUFHLG1CQUFtQixFQUFFLENBQUM7UUFDcEMsTUFBTSxPQUFPLEdBQUcsY0FBYyxDQUFDLEtBQUssRUFBRTtZQUNwQyxJQUFJLEVBQUUsUUFBUSxDQUFDLGtCQUFrQjtZQUNqQyxXQUFXO1NBQ1osQ0FBQyxDQUFDO1FBQ0gsTUFBTSxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLFNBQVMsR0FBRyxDQUFDLFdBQVcsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUMzRSxDQUFDLENBQUMsQ0FBQztJQUVILEVBQUUsQ0FBQyxzQ0FBc0MsRUFBRSxHQUFHLEVBQUU7UUFDOUMsTUFBTSxLQUFLLEdBQUcsbUJBQW1CLEVBQUUsQ0FBQztRQUNwQyxNQUFNLE9BQU8sR0FBRyxjQUFjLENBQUMsS0FBSyxFQUFFO1lBQ3BDLElBQUksRUFBRSxRQUFRLENBQUMsa0JBQWtCO1lBQ2pDLFdBQVc7U0FDWixDQUFDLENBQUM7UUFDSCxNQUFNLENBQUMsT0FBTyxDQUFDLGNBQWMsQ0FBQyxDQUFDLE9BQU8sQ0FDcEMsS0FBSyxDQUFDLGNBQWMsR0FBRyxDQUFDLFdBQVcsQ0FBQyxNQUFNLENBQzNDLENBQUM7SUFDSixDQUFDLENBQUMsQ0FBQztBQUNMLENBQUMsQ0FBQyxDQUFDO0FBRUgsUUFBUSxDQUFDLHlDQUF5QyxFQUFFLEdBQUcsRUFBRTtJQUN2RCxFQUFFLENBQUMsZ0NBQWdDLEVBQUUsR0FBRyxFQUFFO1FBQ3hDLE1BQU0sSUFBSSxHQUFHLFdBQVcsQ0FBQyxnQkFBZ0IsRUFBRSxFQUFFO1lBQzNDLElBQUksRUFBRSxRQUFRLENBQUMsa0JBQWtCO1lBQ2pDLFdBQVc7U0FDWixDQUFDLENBQUM7UUFDSCxNQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUN0QyxDQUFDLENBQUMsQ0FBQztJQUVILEVBQUUsQ0FBQyw4QkFBOEIsRUFBRSxHQUFHLEVBQUU7UUFDdEMsTUFBTSxJQUFJLEdBQUcsV0FBVyxDQUFDLGdCQUFnQixFQUFFLEVBQUU7WUFDM0MsSUFBSSxFQUFFLFFBQVEsQ0FBQyxVQUFVO1lBQ3pCLFdBQVc7U0FDWixDQUFDLENBQUM7UUFDSCxNQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUNyQyxDQUFDLENBQUMsQ0FBQztJQUVILEVBQUUsQ0FBQyw2QkFBNkIsRUFBRSxHQUFHLEVBQUU7UUFDckMsTUFBTSxJQUFJLEdBQUcsV0FBVyxDQUFDLGdCQUFnQixFQUFFLEVBQUU7WUFDM0MsSUFBSSxFQUFFLFFBQVEsQ0FBQyxlQUFlO1NBQy9CLENBQUMsQ0FBQztRQUNILE1BQU0sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ3RDLENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDLENBQUMiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiL1VzZXJzL2RhdmlkbXVycGh5L0Rlc2t0b3AvTW9uZXlTZW5kZXIvc3JjL19fdGVzdHNfXy9Gb3JtUmVkdWNlclRlc3RzLnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgXCJyZWFjdC1uYXRpdmVcIjtcbmltcG9ydCBBY2NvdW50UmVkdWNlciwgeyBkZWZhdWx0QWNjb3VudFN0YXRlIH0gZnJvbSBcIi4uL0FjY291bnQvUmVkdWNlcnNcIjtcbmltcG9ydCBTZW5kUmVkdWNlciwgeyBkZWZhdWx0U2VuZFN0YXRlIH0gZnJvbSBcIi4uL1NlbmQvUmVkdWNlcnNcIjtcbmltcG9ydCB7IFR5cGVLZXlzIH0gZnJvbSBcIi4uL0FjdGlvblR5cGVzXCI7XG5cbmNvbnN0IHRyYW5zYWN0aW9uID0ge1xuICBuYW1lOiBcIkRhdmlkXCIsXG4gIGVtYWlsOiBcIkRhdmlkLmNvbm9yLm1AZ21haWwuY29tXCIsXG4gIGFtb3VudDogXCIxMDBcIlxufTtcblxuZGVzY3JpYmUoXCJBY2NvdW50IHJlZHVjZXIgc2hvdWxkIGZ1bmN0aW9uIGNvcnJlY3RseVwiLCAoKSA9PiB7XG4gIGl0KFwic2hvdWxkIGFkZCBhIHRyYW5zYWN0aW9uIHRvIG91ciBsaXN0XCIsICgpID0+IHtcbiAgICBjb25zdCBhY2NvdW50ID0gQWNjb3VudFJlZHVjZXIoZGVmYXVsdEFjY291bnRTdGF0ZSgpLCB7XG4gICAgICB0eXBlOiBUeXBlS2V5cy5TRU5EX01PTkVZX1NVQ0NFU1MsXG4gICAgICB0cmFuc2FjdGlvblxuICAgIH0pO1xuICAgIGV4cGVjdChhY2NvdW50LnRyYW5zYXRpb25zKS50b0VxdWFsKFt0cmFuc2FjdGlvbl0pO1xuICB9KTtcblxuICBpdChcInNob3VsZCBhZGQgYW1tb3VudCB0byBvdXIgc2VuZCB0b3RhbFwiLCAoKSA9PiB7XG4gICAgY29uc3Qgc3RhdGUgPSBkZWZhdWx0QWNjb3VudFN0YXRlKCk7XG4gICAgY29uc3QgYWNjb3VudCA9IEFjY291bnRSZWR1Y2VyKHN0YXRlLCB7XG4gICAgICB0eXBlOiBUeXBlS2V5cy5TRU5EX01PTkVZX1NVQ0NFU1MsXG4gICAgICB0cmFuc2FjdGlvblxuICAgIH0pO1xuICAgIGV4cGVjdChhY2NvdW50LnRvdGFsU2VudCkudG9FcXVhbChzdGF0ZS50b3RhbFNlbnQgKyArdHJhbnNhY3Rpb24uYW1vdW50KTtcbiAgfSk7XG5cbiAgaXQoXCJzaG91bGQgcmVtb3ZlIGFtbW91bnQgZnJvbSBvdXQgdG90YWxcIiwgKCkgPT4ge1xuICAgIGNvbnN0IHN0YXRlID0gZGVmYXVsdEFjY291bnRTdGF0ZSgpO1xuICAgIGNvbnN0IGFjY291bnQgPSBBY2NvdW50UmVkdWNlcihzdGF0ZSwge1xuICAgICAgdHlwZTogVHlwZUtleXMuU0VORF9NT05FWV9TVUNDRVNTLFxuICAgICAgdHJhbnNhY3Rpb25cbiAgICB9KTtcbiAgICBleHBlY3QoYWNjb3VudC50b3RhbEF2YWlsYWJsZSkudG9FcXVhbChcbiAgICAgIHN0YXRlLnRvdGFsQXZhaWxhYmxlIC0gK3RyYW5zYWN0aW9uLmFtb3VudFxuICAgICk7XG4gIH0pO1xufSk7XG5cbmRlc2NyaWJlKFwiQVNlbmQgcmVkdWNlciBzaG91bGQgZnVuY3Rpb24gY29ycmVjdGx5XCIsICgpID0+IHtcbiAgaXQoXCJzaG91bGQgc3RvcCBsb2FkaW5nIG9uIHN1Y2Nlc3NcIiwgKCkgPT4ge1xuICAgIGNvbnN0IHNlbmQgPSBTZW5kUmVkdWNlcihkZWZhdWx0U2VuZFN0YXRlKCksIHtcbiAgICAgIHR5cGU6IFR5cGVLZXlzLlNFTkRfTU9ORVlfU1VDQ0VTUyxcbiAgICAgIHRyYW5zYWN0aW9uXG4gICAgfSk7XG4gICAgZXhwZWN0KHNlbmQubG9hZGluZykudG9FcXVhbChmYWxzZSk7XG4gIH0pO1xuXG4gIGl0KFwic2hvdWxkIHN0YXJ0IGxvYWRpbmcgb24gc2VuZFwiLCAoKSA9PiB7XG4gICAgY29uc3Qgc2VuZCA9IFNlbmRSZWR1Y2VyKGRlZmF1bHRTZW5kU3RhdGUoKSwge1xuICAgICAgdHlwZTogVHlwZUtleXMuU0VORF9NT05FWSxcbiAgICAgIHRyYW5zYWN0aW9uXG4gICAgfSk7XG4gICAgZXhwZWN0KHNlbmQubG9hZGluZykudG9FcXVhbCh0cnVlKTtcbiAgfSk7XG5cbiAgaXQoXCJzaG91bGQgc3RvcCBsb2FkaW5nIG9uIGZhaWxcIiwgKCkgPT4ge1xuICAgIGNvbnN0IHNlbmQgPSBTZW5kUmVkdWNlcihkZWZhdWx0U2VuZFN0YXRlKCksIHtcbiAgICAgIHR5cGU6IFR5cGVLZXlzLlNFTkRfTU9ORVlfRkFJTFxuICAgIH0pO1xuICAgIGV4cGVjdChzZW5kLmxvYWRpbmcpLnRvRXF1YWwoZmFsc2UpO1xuICB9KTtcbn0pO1xuIl0sInZlcnNpb24iOjN9