"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const redux_observable_1 = require("redux-observable");
const ActionTypes_1 = require("../../ActionTypes");
const rxjs_1 = require("rxjs");
const operators_1 = require("rxjs/operators");
exports.errorTitle = "Error";
exports.errorMessage = "Insufficient funds";
exports.SendMoneyEpic = (action, store) => action.pipe(redux_observable_1.ofType(ActionTypes_1.TypeKeys.SEND_MONEY), operators_1.mergeMap((action$) => {
    const state = store.value;
    const total = state.account.totalAvailable;
    const amount = +action$.transaction.amount;
    return total - amount >= 0
        ? rxjs_1.of({
            type: ActionTypes_1.TypeKeys.SEND_MONEY_SUCCESS,
            transaction: action$.transaction
        })
        : rxjs_1.of({ type: ActionTypes_1.TypeKeys.SEND_MONEY_FAIL });
}), operators_1.delay(3000));
exports.FailedSendEpic = (action) => action.pipe(redux_observable_1.ofType(ActionTypes_1.TypeKeys.SEND_MONEY_FAIL), operators_1.mergeMap(() => rxjs_1.of({
    type: ActionTypes_1.TypeKeys.SHOW_ERROR,
    title: "Error",
    message: "Insufficient funds"
})));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2RhdmlkbXVycGh5L0Rlc2t0b3AvTW9uZXlTZW5kZXIvc3JjL1NlbmQvRXBpY3MvaW5kZXgudHN4IiwibWFwcGluZ3MiOiI7O0FBQ0EsdURBQThFO0FBQzlFLG1EQUE2QztBQU03QywrQkFBc0M7QUFDdEMsOENBQWlEO0FBSXBDLFFBQUEsVUFBVSxHQUFHLE9BQU8sQ0FBQztBQUNyQixRQUFBLFlBQVksR0FBRyxvQkFBb0IsQ0FBQztBQUVwQyxRQUFBLGFBQWEsR0FBRyxDQUMzQixNQUFpQyxFQUNqQyxLQUE2QixFQUM3QixFQUFFLENBQ0YsTUFBTSxDQUFDLElBQUksQ0FDVCx5QkFBTSxDQUFDLHNCQUFRLENBQUMsVUFBVSxDQUFDLEVBQzNCLG9CQUFRLENBQ04sQ0FBQyxPQUF3QixFQUNxQyxFQUFFO0lBQzlELE1BQU0sS0FBSyxHQUFHLEtBQUssQ0FBQyxLQUFLLENBQUM7SUFDMUIsTUFBTSxLQUFLLEdBQUcsS0FBSyxDQUFDLE9BQU8sQ0FBQyxjQUFjLENBQUM7SUFDM0MsTUFBTSxNQUFNLEdBQUcsQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQztJQUMzQyxPQUFPLEtBQUssR0FBRyxNQUFNLElBQUksQ0FBQztRQUN4QixDQUFDLENBQUMsU0FBRSxDQUF5QjtZQUN6QixJQUFJLEVBQUUsc0JBQVEsQ0FBQyxrQkFBa0I7WUFDakMsV0FBVyxFQUFFLE9BQU8sQ0FBQyxXQUFXO1NBQ2pDLENBQUM7UUFDSixDQUFDLENBQUMsU0FBRSxDQUFzQixFQUFFLElBQUksRUFBRSxzQkFBUSxDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUE7QUFDakUsQ0FBQyxDQUNGLEVBQ0QsaUJBQUssQ0FBQyxJQUFJLENBQUMsQ0FDWixDQUFDO0FBRVMsUUFBQSxjQUFjLEdBQUcsQ0FBQyxNQUFpQyxFQUFFLEVBQUUsQ0FDbEUsTUFBTSxDQUFDLElBQUksQ0FDVCx5QkFBTSxDQUFDLHNCQUFRLENBQUMsZUFBZSxDQUFDLEVBQ2hDLG9CQUFRLENBQ04sR0FBNEIsRUFBRSxDQUM1QixTQUFFLENBQWM7SUFDZCxJQUFJLEVBQUUsc0JBQVEsQ0FBQyxVQUFVO0lBQ3pCLEtBQUssRUFBRSxPQUFPO0lBQ2QsT0FBTyxFQUFFLG9CQUFvQjtDQUM5QixDQUFDLENBQ0wsQ0FDRixDQUFDIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIi9Vc2Vycy9kYXZpZG11cnBoeS9EZXNrdG9wL01vbmV5U2VuZGVyL3NyYy9TZW5kL0VwaWNzL2luZGV4LnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBY3Rpb24gfSBmcm9tIFwicmVkdXhcIjtcbmltcG9ydCB7IG9mVHlwZSwgQWN0aW9uc09ic2VydmFibGUsIFN0YXRlT2JzZXJ2YWJsZSB9IGZyb20gXCJyZWR1eC1vYnNlcnZhYmxlXCI7XG5pbXBvcnQgeyBUeXBlS2V5cyB9IGZyb20gXCIuLi8uLi9BY3Rpb25UeXBlc1wiO1xuaW1wb3J0IHtcbiAgU2VuZE1vbmV5QWN0aW9uLFxuICBTZW5kTW9uZXlBY3Rpb25TdWNjZXNzLFxuICBTZW5kTW9uZXlBY3Rpb25GYWlsXG59IGZyb20gXCIuLi9SZWR1Y2Vyc1wiO1xuaW1wb3J0IHsgb2YsIE9ic2VydmFibGUgfSBmcm9tIFwicnhqc1wiO1xuaW1wb3J0IHsgbWVyZ2VNYXAsIGRlbGF5IH0gZnJvbSBcInJ4anMvb3BlcmF0b3JzXCI7XG5pbXBvcnQgeyBFcnJvckFjdGlvbiB9IGZyb20gXCIuLi8uLi9FcnJvclwiO1xuaW1wb3J0IHsgU3RhdGUgfSBmcm9tIFwiLi4vLi4vQXBwXCI7XG5cbmV4cG9ydCBjb25zdCBlcnJvclRpdGxlID0gXCJFcnJvclwiO1xuZXhwb3J0IGNvbnN0IGVycm9yTWVzc2FnZSA9IFwiSW5zdWZmaWNpZW50IGZ1bmRzXCI7XG5cbmV4cG9ydCBjb25zdCBTZW5kTW9uZXlFcGljID0gKFxuICBhY3Rpb246IEFjdGlvbnNPYnNlcnZhYmxlPEFjdGlvbj4sXG4gIHN0b3JlOiBTdGF0ZU9ic2VydmFibGU8U3RhdGU+XG4pID0+XG4gIGFjdGlvbi5waXBlKFxuICAgIG9mVHlwZShUeXBlS2V5cy5TRU5EX01PTkVZKSxcbiAgICBtZXJnZU1hcChcbiAgICAgIChhY3Rpb24kOiBTZW5kTW9uZXlBY3Rpb25cbiAgICAgICAgKTogT2JzZXJ2YWJsZTxTZW5kTW9uZXlBY3Rpb25TdWNjZXNzIHwgU2VuZE1vbmV5QWN0aW9uRmFpbD4gPT4ge1xuICAgICAgICBjb25zdCBzdGF0ZSA9IHN0b3JlLnZhbHVlO1xuICAgICAgICBjb25zdCB0b3RhbCA9IHN0YXRlLmFjY291bnQudG90YWxBdmFpbGFibGU7XG4gICAgICAgIGNvbnN0IGFtb3VudCA9ICthY3Rpb24kLnRyYW5zYWN0aW9uLmFtb3VudDtcbiAgICAgICAgcmV0dXJuIHRvdGFsIC0gYW1vdW50ID49IDBcbiAgICAgICAgICA/IG9mPFNlbmRNb25leUFjdGlvblN1Y2Nlc3M+KHtcbiAgICAgICAgICAgICAgdHlwZTogVHlwZUtleXMuU0VORF9NT05FWV9TVUNDRVNTLFxuICAgICAgICAgICAgICB0cmFuc2FjdGlvbjogYWN0aW9uJC50cmFuc2FjdGlvblxuICAgICAgICAgICAgfSlcbiAgICAgICAgICA6IG9mPFNlbmRNb25leUFjdGlvbkZhaWw+KHsgdHlwZTogVHlwZUtleXMuU0VORF9NT05FWV9GQUlMIH0pXG4gICAgICB9XG4gICAgKSxcbiAgICBkZWxheSgzMDAwKVxuICApO1xuXG5leHBvcnQgY29uc3QgRmFpbGVkU2VuZEVwaWMgPSAoYWN0aW9uOiBBY3Rpb25zT2JzZXJ2YWJsZTxBY3Rpb24+KSA9PlxuICBhY3Rpb24ucGlwZShcbiAgICBvZlR5cGUoVHlwZUtleXMuU0VORF9NT05FWV9GQUlMKSxcbiAgICBtZXJnZU1hcChcbiAgICAgICgpOiBPYnNlcnZhYmxlPEVycm9yQWN0aW9uPiA9PlxuICAgICAgICBvZjxFcnJvckFjdGlvbj4oe1xuICAgICAgICAgIHR5cGU6IFR5cGVLZXlzLlNIT1dfRVJST1IsXG4gICAgICAgICAgdGl0bGU6IFwiRXJyb3JcIixcbiAgICAgICAgICBtZXNzYWdlOiBcIkluc3VmZmljaWVudCBmdW5kc1wiXG4gICAgICAgIH0pXG4gICAgKVxuICApO1xuIl0sInZlcnNpb24iOjN9