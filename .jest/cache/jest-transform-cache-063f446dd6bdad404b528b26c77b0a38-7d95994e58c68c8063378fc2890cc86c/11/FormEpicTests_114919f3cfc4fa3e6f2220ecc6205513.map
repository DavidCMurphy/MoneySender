{"file":"/Users/davidmurphy/Desktop/MoneySender/src/__tests__/FormEpicTests.tsx","mappings":";;;;;;;;;;AAAA,yCAAwF;AAExF,uDAAqD;AACrD,gDAA0C;AAC1C,+BAA0B;AAG1B,QAAQ,CAAC,2CAA2C,EAAE,GAAG,EAAE;IACzD,iBAAiB;IACjB,MAAM,KAAK,GAAG;QACZ,KAAK,EAAE;YACL,OAAO,EAAE;gBACP,cAAc,EAAE,IAAI;gBACpB,SAAS,EAAE,CAAC;aACb;SACF;KACF,CAAC;IAEF,EAAE,CAAC,iCAAiC,EAAE,GAAS,EAAE;QAC/C,MAAM,WAAW,GAAgB;YAC/B,IAAI,EAAE,EAAE;YACR,KAAK,EAAE,EAAE;YACT,MAAM,EAAE,KAAK;SACd,CAAC;QAEF,MAAM,MAAM,GAAoB;YAC9B,IAAI,EAAE,sBAAQ,CAAC,UAAU;YACzB,WAAW;SACZ,CAAC;QAEF,MAAM,gBAAgB,GAAG,IAAI,oCAAiB,CAAY,SAAE,CAAC,MAAM,CAAC,CAAC,CAAC;QACtE,MAAM,MAAM,GAAG,qBAAa,CAAC,gBAAgB,EAAE,KAAY,CAAC,CAAC;QAC7D,MAAM,OAAO,GAAG,MAAM,MAAM,CAAC,SAAS,EAAE,CAAC;QAEzC,MAAM,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,EAAE,IAAI,EAAE,sBAAQ,CAAC,kBAAkB,EAAE,WAAW,EAAE,CAAC,CAAC;IAC9E,CAAC,CAAA,CAAC,CAAC;IAEH,EAAE,CAAC,qDAAqD,EAAE,GAAS,EAAE;QACnE,MAAM,WAAW,GAAgB;YAC/B,IAAI,EAAE,EAAE;YACR,KAAK,EAAE,EAAE;YACT,MAAM,EAAE,SAAS;SAClB,CAAC;QAEF,MAAM,MAAM,GAAoB;YAC9B,IAAI,EAAE,sBAAQ,CAAC,UAAU;YACzB,WAAW;SACZ,CAAC;QAEF,MAAM,gBAAgB,GAAG,IAAI,oCAAiB,CAAY,SAAE,CAAC,MAAM,CAAC,CAAC,CAAC;QACtE,MAAM,MAAM,GAAG,qBAAa,CAAC,gBAAgB,EAAE,KAAY,CAAC,CAAC;QAC7D,MAAM,OAAO,GAAG,MAAM,MAAM,CAAC,SAAS,EAAE,CAAC;QACzC,MAAM,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC;YACtB,IAAI,EAAE,sBAAQ,CAAC,eAAe;SAC/B,CAAC,CAAC;IACL,CAAC,CAAA,CAAC,CAAC;IAEH,EAAE,CAAC,8DAA8D,EAAE,GAAS,EAAE;QAC5E,MAAM,MAAM,GAAwB;YAClC,IAAI,EAAE,sBAAQ,CAAC,eAAe;SAC/B,CAAC;QAEF,MAAM,gBAAgB,GAAG,IAAI,oCAAiB,CAAY,SAAE,CAAC,MAAM,CAAC,CAAC,CAAC;QACtE,MAAM,MAAM,GAAG,sBAAc,CAAC,gBAAgB,CAAC,CAAC;QAChD,MAAM,OAAO,GAAG,MAAM,MAAM,CAAC,SAAS,EAAE,CAAC;QACzC,MAAM,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC;YACtB,IAAI,EAAE,sBAAQ,CAAC,UAAU;YACzB,KAAK,EAAE,kBAAU;YACjB,OAAO,EAAE,oBAAY;SACtB,CAAC,CAAC;IACL,CAAC,CAAA,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","names":[],"sources":["/Users/davidmurphy/Desktop/MoneySender/src/__tests__/FormEpicTests.tsx"],"sourcesContent":["import { SendMoneyEpic, FailedSendEpic ,errorTitle, errorMessage } from \"../Send/Epics\";\nimport { SendMoneyAction, Transaction, SendMoneyActionFail } from \"../Send/Reducers\";\nimport { ActionsObservable } from \"redux-observable\";\nimport { TypeKeys } from \"../ActionTypes\";\nimport { of } from \"rxjs\";\nimport { AnyAction } from \"redux\";\n\ndescribe(\"Form validation should function correctly\", () => {\n  // mock the store\n  const store = {\n    value: {\n      account: {\n        totalAvailable: 1000,\n        totalSent: 0\n      }\n    }\n  };\n\n  it(`send should submit successfully`, async () => {\n    const transaction: Transaction = {\n      name: \"\",\n      email: \"\",\n      amount: \"100\"\n    };\n\n    const action: SendMoneyAction = {\n      type: TypeKeys.SEND_MONEY,\n      transaction\n    };\n\n    const actionObservable = new ActionsObservable<AnyAction>(of(action));\n    const result = SendMoneyEpic(actionObservable, store as any);\n    const actions = await result.toPromise();\n\n    expect(actions).toEqual({ type: TypeKeys.SEND_MONEY_SUCCESS, transaction });\n  });\n\n  it(`send should fail because you dont have enough money`, async () => {\n    const transaction: Transaction = {\n      name: \"\",\n      email: \"\",\n      amount: \"1000000\"\n    };\n\n    const action: SendMoneyAction = {\n      type: TypeKeys.SEND_MONEY,\n      transaction\n    };\n\n    const actionObservable = new ActionsObservable<AnyAction>(of(action));\n    const result = SendMoneyEpic(actionObservable, store as any);\n    const actions = await result.toPromise();\n    expect(actions).toEqual({\n      type: TypeKeys.SEND_MONEY_FAIL\n    });\n  });\n\n  it(`send should show an error message when the request does fail`, async () => {\n    const action: SendMoneyActionFail = {\n      type: TypeKeys.SEND_MONEY_FAIL,\n    };\n\n    const actionObservable = new ActionsObservable<AnyAction>(of(action));\n    const result = FailedSendEpic(actionObservable);\n    const actions = await result.toPromise();\n    expect(actions).toEqual({\n      type: TypeKeys.SHOW_ERROR,\n      title: errorTitle,\n      message: errorMessage\n    });\n  });\n});\n"],"version":3}