a3821612db47e5e6f466f3a2b53d9e87
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.StateObservable = undefined;

var _rxjs = require('rxjs');

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _possibleConstructorReturn(self, call) {
  if (!self) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return call && (typeof call === "object" || typeof call === "function") ? call : self;
}

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      enumerable: false,
      writable: true,
      configurable: true
    }
  });
  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
}

var StateObservable = exports.StateObservable = function (_Observable) {
  _inherits(StateObservable, _Observable);

  function StateObservable(stateSubject, initialState) {
    _classCallCheck(this, StateObservable);

    var _this = _possibleConstructorReturn(this, (StateObservable.__proto__ || Object.getPrototypeOf(StateObservable)).call(this, function (subscriber) {
      var subscription = _this.__notifier.subscribe(subscriber);

      if (subscription && !subscription.closed) {
        subscriber.next(_this.value);
      }

      return subscription;
    }));

    _this.value = initialState;
    _this.__notifier = new _rxjs.Subject();
    _this.__subscription = stateSubject.subscribe(function (value) {
      if (value !== _this.value) {
        _this.value = value;

        _this.__notifier.next(value);
      }
    });
    return _this;
  }

  return StateObservable;
}(_rxjs.Observable);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlN0YXRlT2JzZXJ2YWJsZS5qcyJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIlN0YXRlT2JzZXJ2YWJsZSIsInVuZGVmaW5lZCIsIl9yeGpzIiwicmVxdWlyZSIsIl9jbGFzc0NhbGxDaGVjayIsImluc3RhbmNlIiwiQ29uc3RydWN0b3IiLCJUeXBlRXJyb3IiLCJfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiIsInNlbGYiLCJjYWxsIiwiUmVmZXJlbmNlRXJyb3IiLCJfaW5oZXJpdHMiLCJzdWJDbGFzcyIsInN1cGVyQ2xhc3MiLCJwcm90b3R5cGUiLCJjcmVhdGUiLCJjb25zdHJ1Y3RvciIsImVudW1lcmFibGUiLCJ3cml0YWJsZSIsImNvbmZpZ3VyYWJsZSIsInNldFByb3RvdHlwZU9mIiwiX19wcm90b19fIiwiX09ic2VydmFibGUiLCJzdGF0ZVN1YmplY3QiLCJpbml0aWFsU3RhdGUiLCJfdGhpcyIsImdldFByb3RvdHlwZU9mIiwic3Vic2NyaWJlciIsInN1YnNjcmlwdGlvbiIsIl9fbm90aWZpZXIiLCJzdWJzY3JpYmUiLCJjbG9zZWQiLCJuZXh0IiwiU3ViamVjdCIsIl9fc3Vic2NyaXB0aW9uIiwiT2JzZXJ2YWJsZSJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUFBLE1BQU0sQ0FBQ0MsY0FBUCxDQUFzQkMsT0FBdEIsRUFBK0IsWUFBL0IsRUFBNkM7QUFDM0NDLEVBQUFBLEtBQUssRUFBRTtBQURvQyxDQUE3QztBQUdBRCxPQUFPLENBQUNFLGVBQVIsR0FBMEJDLFNBQTFCOztBQUVBLElBQUlDLEtBQUssR0FBR0MsT0FBTyxDQUFDLE1BQUQsQ0FBbkI7O0FBRUEsU0FBU0MsZUFBVCxDQUF5QkMsUUFBekIsRUFBbUNDLFdBQW5DLEVBQWdEO0FBQUUsTUFBSSxFQUFFRCxRQUFRLFlBQVlDLFdBQXRCLENBQUosRUFBd0M7QUFBRSxVQUFNLElBQUlDLFNBQUosQ0FBYyxtQ0FBZCxDQUFOO0FBQTJE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LEtBQUssQ0FBQ2tDLFVBOUJ3QyxDQUFoRCIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuU3RhdGVPYnNlcnZhYmxlID0gdW5kZWZpbmVkO1xuXG52YXIgX3J4anMgPSByZXF1aXJlKCdyeGpzJyk7XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxudmFyIFN0YXRlT2JzZXJ2YWJsZSA9IGV4cG9ydHMuU3RhdGVPYnNlcnZhYmxlID0gZnVuY3Rpb24gKF9PYnNlcnZhYmxlKSB7XG4gIF9pbmhlcml0cyhTdGF0ZU9ic2VydmFibGUsIF9PYnNlcnZhYmxlKTtcblxuICBmdW5jdGlvbiBTdGF0ZU9ic2VydmFibGUoc3RhdGVTdWJqZWN0LCBpbml0aWFsU3RhdGUpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgU3RhdGVPYnNlcnZhYmxlKTtcblxuICAgIHZhciBfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChTdGF0ZU9ic2VydmFibGUuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihTdGF0ZU9ic2VydmFibGUpKS5jYWxsKHRoaXMsIGZ1bmN0aW9uIChzdWJzY3JpYmVyKSB7XG4gICAgICB2YXIgc3Vic2NyaXB0aW9uID0gX3RoaXMuX19ub3RpZmllci5zdWJzY3JpYmUoc3Vic2NyaWJlcik7XG4gICAgICBpZiAoc3Vic2NyaXB0aW9uICYmICFzdWJzY3JpcHRpb24uY2xvc2VkKSB7XG4gICAgICAgIHN1YnNjcmliZXIubmV4dChfdGhpcy52YWx1ZSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gc3Vic2NyaXB0aW9uO1xuICAgIH0pKTtcblxuICAgIF90aGlzLnZhbHVlID0gaW5pdGlhbFN0YXRlO1xuICAgIF90aGlzLl9fbm90aWZpZXIgPSBuZXcgX3J4anMuU3ViamVjdCgpO1xuICAgIF90aGlzLl9fc3Vic2NyaXB0aW9uID0gc3RhdGVTdWJqZWN0LnN1YnNjcmliZShmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgIC8vIFdlIG9ubHkgd2FudCB0byB1cGRhdGUgc3RhdGUkIGlmIGl0IGhhcyBhY3R1YWxseSBjaGFuZ2VkIHNpbmNlXG4gICAgICAvLyByZWR1eCByZXF1aXJlcyByZWR1Y2VycyB1c2UgaW1tdXRhYmlsaXR5IHBhdHRlcm5zLlxuICAgICAgLy8gVGhpcyBpcyBiYXNpY2FsbHkgd2hhdCBkaXN0aW5jdFVudGlsQ2hhbmdlZCgpIGRvZXMgYnV0IGl0J3Mgc28gc2ltcGxlXG4gICAgICAvLyB3ZSBkb24ndCBuZWVkIHRvIHB1bGwgdGhhdCBjb2RlIGluXG4gICAgICBpZiAodmFsdWUgIT09IF90aGlzLnZhbHVlKSB7XG4gICAgICAgIF90aGlzLnZhbHVlID0gdmFsdWU7XG4gICAgICAgIF90aGlzLl9fbm90aWZpZXIubmV4dCh2YWx1ZSk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgcmV0dXJuIFN0YXRlT2JzZXJ2YWJsZTtcbn0oX3J4anMuT2JzZXJ2YWJsZSk7Il19