6e04735531956799111e0927596afc4e
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var Observable_1 = require("../Observable");

var isArray_1 = require("../util/isArray");

var isFunction_1 = require("../util/isFunction");

var map_1 = require("../operators/map");

var toString = Object.prototype.toString;

function fromEvent(target, eventName, options, resultSelector) {
  if (isFunction_1.isFunction(options)) {
    resultSelector = options;
    options = undefined;
  }

  if (resultSelector) {
    return fromEvent(target, eventName, options).pipe(map_1.map(function (args) {
      return isArray_1.isArray(args) ? resultSelector.apply(void 0, args) : resultSelector(args);
    }));
  }

  return new Observable_1.Observable(function (subscriber) {
    function handler(e) {
      if (arguments.length > 1) {
        subscriber.next(Array.prototype.slice.call(arguments));
      } else {
        subscriber.next(e);
      }
    }

    setupSubscription(target, eventName, handler, subscriber, options);
  });
}

exports.fromEvent = fromEvent;

function setupSubscription(sourceObj, eventName, handler, subscriber, options) {
  var unsubscribe;

  if (isEventTarget(sourceObj)) {
    var source_1 = sourceObj;
    sourceObj.addEventListener(eventName, handler, options);

    unsubscribe = function unsubscribe() {
      return source_1.removeEventListener(eventName, handler, options);
    };
  } else if (isJQueryStyleEventEmitter(sourceObj)) {
    var source_2 = sourceObj;
    sourceObj.on(eventName, handler);

    unsubscribe = function unsubscribe() {
      return source_2.off(eventName, handler);
    };
  } else if (isNodeStyleEventEmitter(sourceObj)) {
    var source_3 = sourceObj;
    sourceObj.addListener(eventName, handler);

    unsubscribe = function unsubscribe() {
      return source_3.removeListener(eventName, handler);
    };
  } else if (sourceObj && sourceObj.length) {
    for (var i = 0, len = sourceObj.length; i < len; i++) {
      setupSubscription(sourceObj[i], eventName, handler, subscriber, options);
    }
  } else {
    throw new TypeError('Invalid event target');
  }

  subscriber.add(unsubscribe);
}

function isNodeStyleEventEmitter(sourceObj) {
  return sourceObj && typeof sourceObj.addListener === 'function' && typeof sourceObj.removeListener === 'function';
}

function isJQueryStyleEventEmitter(sourceObj) {
  return sourceObj && typeof sourceObj.on === 'function' && typeof sourceObj.off === 'function';
}

function isEventTarget(sourceObj) {
  return sourceObj && typeof sourceObj.addEventListener === 'function' && typeof sourceObj.removeEventListener === 'function';
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9pbnRlcm5hbC9vYnNlcnZhYmxlL2Zyb21FdmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxJQUFBLFlBQUEsR0FBQSxPQUFBLENBQUEsZUFBQSxDQUFBOztBQUNBLElBQUEsU0FBQSxHQUFBLE9BQUEsQ0FBQSxpQkFBQSxDQUFBOztBQUNBLElBQUEsWUFBQSxHQUFBLE9BQUEsQ0FBQSxvQkFBQSxDQUFBOztBQUVBLElBQUEsS0FBQSxHQUFBLE9BQUEsQ0FBQSxrQkFBQSxDQUFBOztBQUVBLElBQU0sUUFBUSxHQUFhLE1BQU0sQ0FBQyxTQUFQLENBQWlCLFFBQTVDOztBQTBLQSxTQUFnQixTQUFoQixDQUNFLE1BREYsRUFFRSxTQUZGLEVBR0UsT0FIRixFQUlFLGNBSkYsRUFJMEM7QUFHeEMsTUFBSSxZQUFBLENBQUEsVUFBQSxDQUFXLE9BQVgsQ0FBSixFQUF5QjtBQUV2QixJQUFBLGNBQWMsR0FBRyxPQUFqQjtBQUNBLElBQUEsT0FBTyxHQUFHLFNBQVY7QUFDRDs7QUFDRCxNQUFJLGNBQUosRUFBb0I7QUFFbEIsV0FBTyxTQUFTLENBQUksTUFBSixFQUFZLFNBQVosRUFBeUQsT0FBekQsQ0FBVCxDQUEyRSxJQUEzRSxDQUNMLEtBQUEsQ0FBQSxHQUFBLENBQUksVUFBQSxJQUFBLEVBQUk7QUFBSSxhQUFBLFNBQUEsQ0FBQSxPQUFBLENBQVEsSUFBUixJQUFnQixjQUFjLENBQUEsS0FBZCxDQUFjLEtBQUEsQ0FBZCxFQUFrQixJQUFsQixDQUFoQixHQUEwQyxjQUFjLENBQXhELElBQXdELENBQXhEO0FBQThELEtBQTFFLENBREssQ0FBUDtBQUdEOztBQUVELFNBQU8sSUFBSSxZQUFBLENBQUEsVUFBSixDQUFrQixVQUFBLFVBQUEsRUFBVTtBQUNqQyxhQUFTLE9BQVQsQ0FBaUIsQ0FBakIsRUFBcUI7QUFDbkIsVUFBSSxTQUFTLENBQUMsTUFBVixHQUFtQixDQUF2QixFQUEwQjtBQUN4QixRQUFBLFVBQVUs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