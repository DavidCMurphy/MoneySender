b175adb48fd9a48f6a4a5047dea20474
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const redux_observable_1 = require("redux-observable");
const ActionTypes_1 = require("../../ActionTypes");
const rxjs_1 = require("rxjs");
const operators_1 = require("rxjs/operators");
exports.errorTitle = "Error";
exports.errorMessage = "Insufficient funds";
exports.SendMoneyEpic = (action, store) => action.pipe(redux_observable_1.ofType(ActionTypes_1.TypeKeys.SEND_MONEY), operators_1.mergeMap((action$) => {
    let state = store.value;
    let total = state.account.totalAvailable;
    let amount = +action$.transaction.amount;
    return total - amount >= 0
        ? rxjs_1.of({
            type: ActionTypes_1.TypeKeys.SEND_MONEY_SUCCESS,
            transaction: action$.transaction
        })
        : rxjs_1.concat(rxjs_1.of({ type: ActionTypes_1.TypeKeys.SEND_MONEY_FAIL }));
}), operators_1.delay(3000));
exports.FailedSendEpic = (action) => action.pipe(redux_observable_1.ofType(ActionTypes_1.TypeKeys.SEND_MONEY_FAIL), operators_1.mergeMap(() => rxjs_1.of({
    type: ActionTypes_1.TypeKeys.SHOW_ERROR,
    title: "Error",
    message: "Insufficient funds"
})));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2RhdmlkbXVycGh5L0Rlc2t0b3AvTW9uZXlTZW5kZXIvc3JjL1NlbmQvRXBpY3MvaW5kZXgudHN4IiwibWFwcGluZ3MiOiI7O0FBQ0EsdURBQThFO0FBQzlFLG1EQUE2QztBQU03QywrQkFBOEM7QUFDOUMsOENBQWlEO0FBSXBDLFFBQUEsVUFBVSxHQUFHLE9BQU8sQ0FBQztBQUNyQixRQUFBLFlBQVksR0FBRyxvQkFBb0IsQ0FBQztBQUVwQyxRQUFBLGFBQWEsR0FBRyxDQUMzQixNQUFpQyxFQUNqQyxLQUE2QixFQUM3QixFQUFFLENBQ0YsTUFBTSxDQUFDLElBQUksQ0FDVCx5QkFBTSxDQUFDLHNCQUFRLENBQUMsVUFBVSxDQUFDLEVBQzNCLG9CQUFRLENBQ04sQ0FDRSxPQUF3QixFQUd4QixFQUFFO0lBQ0YsSUFBSSxLQUFLLEdBQUcsS0FBSyxDQUFDLEtBQUssQ0FBQztJQUN4QixJQUFJLEtBQUssR0FBRyxLQUFLLENBQUMsT0FBTyxDQUFDLGNBQWMsQ0FBQztJQUN6QyxJQUFJLE1BQU0sR0FBRyxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsTUFBTSxDQUFDO0lBQ3pDLE9BQU8sS0FBSyxHQUFHLE1BQU0sSUFBSSxDQUFDO1FBQ3hCLENBQUMsQ0FBQyxTQUFFLENBQXlCO1lBQ3pCLElBQUksRUFBRSxzQkFBUSxDQUFDLGtCQUFrQjtZQUNqQyxXQUFXLEVBQUUsT0FBTyxDQUFDLFdBQVc7U0FDakMsQ0FBQztRQUNKLENBQUMsQ0FBQyxhQUFNLENBQ0osU0FBRSxDQUFzQixFQUFFLElBQUksRUFBRSxzQkFBUSxDQUFDLGVBQWUsRUFBRSxDQUFDLENBQzVELENBQUM7QUFDUixDQUFDLENBQ0YsRUFDRCxpQkFBSyxDQUFDLElBQUksQ0FBQyxDQUNaLENBQUM7QUFFUyxRQUFBLGNBQWMsR0FBRyxDQUFDLE1BQWlDLEVBQUUsRUFBRSxDQUNsRSxNQUFNLENBQUMsSUFBSSxDQUNULHlCQUFNLENBQUMsc0JBQVEsQ0FBQyxlQUFlLENBQUMsRUFDaEMsb0JBQVEsQ0FDTixHQUE0QixFQUFFLENBQzVCLFNBQUUsQ0FBYztJQUNkLElBQUksRUFBRSxzQkFBUSxDQUFDLFVBQVU7SUFDekIsS0FBSyxFQUFFLE9BQU87SUFDZCxPQUFPLEVBQUUsb0JBQW9CO0NBQzlCLENBQUMsQ0FDTCxDQUNGLENBQUMiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiL1VzZXJzL2RhdmlkbXVycGh5L0Rlc2t0b3AvTW9uZXlTZW5kZXIvc3JjL1NlbmQvRXBpY3MvaW5kZXgudHN4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFjdGlvbiB9IGZyb20gXCJyZWR1eFwiO1xuaW1wb3J0IHsgb2ZUeXBlLCBBY3Rpb25zT2JzZXJ2YWJsZSwgU3RhdGVPYnNlcnZhYmxlIH0gZnJvbSBcInJlZHV4LW9ic2VydmFibGVcIjtcbmltcG9ydCB7IFR5cGVLZXlzIH0gZnJvbSBcIi4uLy4uL0FjdGlvblR5cGVzXCI7XG5pbXBvcnQge1xuICBTZW5kTW9uZXlBY3Rpb24sXG4gIFNlbmRNb25leUFjdGlvblN1Y2Nlc3MsXG4gIFNlbmRNb25leUFjdGlvbkZhaWxcbn0gZnJvbSBcIi4uL1JlZHVjZXJzXCI7XG5pbXBvcnQgeyBvZiwgY29uY2F0LCBPYnNlcnZhYmxlIH0gZnJvbSBcInJ4anNcIjtcbmltcG9ydCB7IG1lcmdlTWFwLCBkZWxheSB9IGZyb20gXCJyeGpzL29wZXJhdG9yc1wiO1xuaW1wb3J0IHsgRXJyb3JBY3Rpb24gfSBmcm9tIFwiLi4vLi4vRXJyb3JcIjtcbmltcG9ydCB7IFN0YXRlIH0gZnJvbSBcIi4uLy4uL0FwcFwiO1xuXG5leHBvcnQgY29uc3QgZXJyb3JUaXRsZSA9IFwiRXJyb3JcIjtcbmV4cG9ydCBjb25zdCBlcnJvck1lc3NhZ2UgPSBcIkluc3VmZmljaWVudCBmdW5kc1wiO1xuXG5leHBvcnQgY29uc3QgU2VuZE1vbmV5RXBpYyA9IChcbiAgYWN0aW9uOiBBY3Rpb25zT2JzZXJ2YWJsZTxBY3Rpb24+LFxuICBzdG9yZTogU3RhdGVPYnNlcnZhYmxlPFN0YXRlPlxuKSA9PlxuICBhY3Rpb24ucGlwZShcbiAgICBvZlR5cGUoVHlwZUtleXMuU0VORF9NT05FWSksXG4gICAgbWVyZ2VNYXAoXG4gICAgICAoXG4gICAgICAgIGFjdGlvbiQ6IFNlbmRNb25leUFjdGlvblxuICAgICAgKTogT2JzZXJ2YWJsZTxcbiAgICAgICAgU2VuZE1vbmV5QWN0aW9uU3VjY2VzcyB8IEVycm9yQWN0aW9uIHwgU2VuZE1vbmV5QWN0aW9uRmFpbFxuICAgICAgPiA9PiB7XG4gICAgICAgIGxldCBzdGF0ZSA9IHN0b3JlLnZhbHVlO1xuICAgICAgICBsZXQgdG90YWwgPSBzdGF0ZS5hY2NvdW50LnRvdGFsQXZhaWxhYmxlO1xuICAgICAgICBsZXQgYW1vdW50ID0gK2FjdGlvbiQudHJhbnNhY3Rpb24uYW1vdW50O1xuICAgICAgICByZXR1cm4gdG90YWwgLSBhbW91bnQgPj0gMFxuICAgICAgICAgID8gb2Y8U2VuZE1vbmV5QWN0aW9uU3VjY2Vzcz4oe1xuICAgICAgICAgICAgICB0eXBlOiBUeXBlS2V5cy5TRU5EX01PTkVZX1NVQ0NFU1MsXG4gICAgICAgICAgICAgIHRyYW5zYWN0aW9uOiBhY3Rpb24kLnRyYW5zYWN0aW9uXG4gICAgICAgICAgICB9KVxuICAgICAgICAgIDogY29uY2F0KFxuICAgICAgICAgICAgICBvZjxTZW5kTW9uZXlBY3Rpb25GYWlsPih7IHR5cGU6IFR5cGVLZXlzLlNFTkRfTU9ORVlfRkFJTCB9KVxuICAgICAgICAgICAgKTtcbiAgICAgIH1cbiAgICApLFxuICAgIGRlbGF5KDMwMDApXG4gICk7XG5cbmV4cG9ydCBjb25zdCBGYWlsZWRTZW5kRXBpYyA9IChhY3Rpb246IEFjdGlvbnNPYnNlcnZhYmxlPEFjdGlvbj4pID0+XG4gIGFjdGlvbi5waXBlKFxuICAgIG9mVHlwZShUeXBlS2V5cy5TRU5EX01PTkVZX0ZBSUwpLFxuICAgIG1lcmdlTWFwKFxuICAgICAgKCk6IE9ic2VydmFibGU8RXJyb3JBY3Rpb24+ID0+XG4gICAgICAgIG9mPEVycm9yQWN0aW9uPih7XG4gICAgICAgICAgdHlwZTogVHlwZUtleXMuU0hPV19FUlJPUixcbiAgICAgICAgICB0aXRsZTogXCJFcnJvclwiLFxuICAgICAgICAgIG1lc3NhZ2U6IFwiSW5zdWZmaWNpZW50IGZ1bmRzXCJcbiAgICAgICAgfSlcbiAgICApXG4gICk7XG4iXSwidmVyc2lvbiI6M30=