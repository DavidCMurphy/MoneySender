{"version":3,"sources":["AnimatedValue.js"],"names":["AnimatedInterpolation","require","AnimatedWithChildren","InteractionManager","NativeAnimatedHelper","NativeAnimatedAPI","API","_uniqueId","_flush","rootNode","animatedStyles","Set","findAnimatedStyles","node","update","add","__getChildren","forEach","animatedStyle","AnimatedValue","value","_startingValue","_value","_offset","_animation","_listeners","stopAnimation","Object","keys","length","_startListeningToNativeValueUpdates","stop","_updateValue","__isNative","setAnimatedNodeValue","__getNativeTag","offset","setAnimatedNodeOffset","flattenAnimatedNodeOffset","extractAnimatedNodeOffset","callback","id","String","_stopListeningForNativeValueUpdates","__nativeAnimatedValueListener","startListeningToAnimatedNodeValue","nativeEventEmitter","addListener","data","tag","remove","stopListeningToAnimatedNodeValue","stopTracking","__getValue","config","animation","handle","__isInteraction","createInteractionHandle","previousAnimation","start","result","clearInteractionHandle","_tracking","__detach","tracking","flush","key","type","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n * @format\n */\n'use strict';\n\nconst AnimatedInterpolation = require('./AnimatedInterpolation');\nconst AnimatedWithChildren = require('./AnimatedWithChildren');\nconst InteractionManager = require('InteractionManager');\nconst NativeAnimatedHelper = require('../NativeAnimatedHelper');\n\nimport type Animation, {EndCallback} from '../animations/Animation';\nimport type {InterpolationConfigType} from './AnimatedInterpolation';\nimport type AnimatedTracking from './AnimatedTracking';\n\nconst NativeAnimatedAPI = NativeAnimatedHelper.API;\n\ntype ValueListenerCallback = (state: {value: number}) => void;\n\nlet _uniqueId = 1;\n\n/**\n * Animated works by building a directed acyclic graph of dependencies\n * transparently when you render your Animated components.\n *\n *               new Animated.Value(0)\n *     .interpolate()        .interpolate()    new Animated.Value(1)\n *         opacity               translateY      scale\n *          style                         transform\n *         View#234                         style\n *                                         View#123\n *\n * A) Top Down phase\n * When an Animated.Value is updated, we recursively go down through this\n * graph in order to find leaf nodes: the views that we flag as needing\n * an update.\n *\n * B) Bottom Up phase\n * When a view is flagged as needing an update, we recursively go back up\n * in order to build the new value that it needs. The reason why we need\n * this two-phases process is to deal with composite props such as\n * transform which can receive values from multiple parents.\n */\nfunction _flush(rootNode: AnimatedValue): void {\n  const animatedStyles = new Set();\n  function findAnimatedStyles(node) {\n    /* $FlowFixMe(>=0.68.0 site=react_native_fb) This comment suppresses an\n     * error found when Flow v0.68 was deployed. To see the error delete this\n     * comment and run Flow. */\n    if (typeof node.update === 'function') {\n      animatedStyles.add(node);\n    } else {\n      node.__getChildren().forEach(findAnimatedStyles);\n    }\n  }\n  findAnimatedStyles(rootNode);\n  /* $FlowFixMe */\n  animatedStyles.forEach(animatedStyle => animatedStyle.update());\n}\n\n/**\n * Standard value for driving animations.  One `Animated.Value` can drive\n * multiple properties in a synchronized fashion, but can only be driven by one\n * mechanism at a time.  Using a new mechanism (e.g. starting a new animation,\n * or calling `setValue`) will stop any previous ones.\n *\n * See http://facebook.github.io/react-native/docs/animatedvalue.html\n */\nclass AnimatedValue extends AnimatedWithChildren {\n  _value: number;\n  _startingValue: number;\n  _offset: number;\n  _animation: ?Animation;\n  _tracking: ?AnimatedTracking;\n  _listeners: {[key: string]: ValueListenerCallback};\n  __nativeAnimatedValueListener: ?any;\n\n  constructor(value: number) {\n    super();\n    this._startingValue = this._value = value;\n    this._offset = 0;\n    this._animation = null;\n    this._listeners = {};\n  }\n\n  __detach() {\n    this.stopAnimation();\n    super.__detach();\n  }\n\n  __getValue(): number {\n    return this._value + this._offset;\n  }\n\n  __makeNative() {\n    super.__makeNative();\n\n    if (Object.keys(this._listeners).length) {\n      this._startListeningToNativeValueUpdates();\n    }\n  }\n\n  /**\n   * Directly set the value.  This will stop any animations running on the value\n   * and update all the bound properties.\n   *\n   * See http://facebook.github.io/react-native/docs/animatedvalue.html#setvalue\n   */\n  setValue(value: number): void {\n    if (this._animation) {\n      this._animation.stop();\n      this._animation = null;\n    }\n    this._updateValue(\n      value,\n      !this.__isNative /* don't perform a flush for natively driven values */,\n    );\n    if (this.__isNative) {\n      NativeAnimatedAPI.setAnimatedNodeValue(this.__getNativeTag(), value);\n    }\n  }\n\n  /**\n   * Sets an offset that is applied on top of whatever value is set, whether via\n   * `setValue`, an animation, or `Animated.event`.  Useful for compensating\n   * things like the start of a pan gesture.\n   *\n   * See http://facebook.github.io/react-native/docs/animatedvalue.html#setoffset\n   */\n  setOffset(offset: number): void {\n    this._offset = offset;\n    if (this.__isNative) {\n      NativeAnimatedAPI.setAnimatedNodeOffset(this.__getNativeTag(), offset);\n    }\n  }\n\n  /**\n   * Merges the offset value into the base value and resets the offset to zero.\n   * The final output of the value is unchanged.\n   *\n   * See http://facebook.github.io/react-native/docs/animatedvalue.html#flattenoffset\n   */\n  flattenOffset(): void {\n    this._value += this._offset;\n    this._offset = 0;\n    if (this.__isNative) {\n      NativeAnimatedAPI.flattenAnimatedNodeOffset(this.__getNativeTag());\n    }\n  }\n\n  /**\n   * Sets the offset value to the base value, and resets the base value to zero.\n   * The final output of the value is unchanged.\n   *\n   * See http://facebook.github.io/react-native/docs/animatedvalue.html#extractoffset\n   */\n  extractOffset(): void {\n    this._offset += this._value;\n    this._value = 0;\n    if (this.__isNative) {\n      NativeAnimatedAPI.extractAnimatedNodeOffset(this.__getNativeTag());\n    }\n  }\n\n  /**\n   * Adds an asynchronous listener to the value so you can observe updates from\n   * animations.  This is useful because there is no way to\n   * synchronously read the value because it might be driven natively.\n   *\n   * See http://facebook.github.io/react-native/docs/animatedvalue.html#addlistener\n   */\n  addListener(callback: ValueListenerCallback): string {\n    const id = String(_uniqueId++);\n    this._listeners[id] = callback;\n    if (this.__isNative) {\n      this._startListeningToNativeValueUpdates();\n    }\n    return id;\n  }\n\n  /**\n   * Unregister a listener. The `id` param shall match the identifier\n   * previously returned by `addListener()`.\n   *\n   * See http://facebook.github.io/react-native/docs/animatedvalue.html#removelistener\n   */\n  removeListener(id: string): void {\n    delete this._listeners[id];\n    if (this.__isNative && Object.keys(this._listeners).length === 0) {\n      this._stopListeningForNativeValueUpdates();\n    }\n  }\n\n  /**\n   * Remove all registered listeners.\n   *\n   * See http://facebook.github.io/react-native/docs/animatedvalue.html#removealllisteners\n   */\n  removeAllListeners(): void {\n    this._listeners = {};\n    if (this.__isNative) {\n      this._stopListeningForNativeValueUpdates();\n    }\n  }\n\n  _startListeningToNativeValueUpdates() {\n    if (this.__nativeAnimatedValueListener) {\n      return;\n    }\n\n    NativeAnimatedAPI.startListeningToAnimatedNodeValue(this.__getNativeTag());\n    this.__nativeAnimatedValueListener = NativeAnimatedHelper.nativeEventEmitter.addListener(\n      'onAnimatedValueUpdate',\n      data => {\n        if (data.tag !== this.__getNativeTag()) {\n          return;\n        }\n        this._updateValue(data.value, false /* flush */);\n      },\n    );\n  }\n\n  _stopListeningForNativeValueUpdates() {\n    if (!this.__nativeAnimatedValueListener) {\n      return;\n    }\n\n    this.__nativeAnimatedValueListener.remove();\n    this.__nativeAnimatedValueListener = null;\n    NativeAnimatedAPI.stopListeningToAnimatedNodeValue(this.__getNativeTag());\n  }\n\n  /**\n   * Stops any running animation or tracking. `callback` is invoked with the\n   * final value after stopping the animation, which is useful for updating\n   * state to match the animation position with layout.\n   *\n   * See http://facebook.github.io/react-native/docs/animatedvalue.html#stopanimation\n   */\n  stopAnimation(callback?: ?(value: number) => void): void {\n    this.stopTracking();\n    this._animation && this._animation.stop();\n    this._animation = null;\n    callback && callback(this.__getValue());\n  }\n\n  /**\n   * Stops any animation and resets the value to its original.\n   *\n   * See http://facebook.github.io/react-native/docs/animatedvalue.html#resetanimation\n   */\n  resetAnimation(callback?: ?(value: number) => void): void {\n    this.stopAnimation(callback);\n    this._value = this._startingValue;\n  }\n\n  /**\n   * Interpolates the value before updating the property, e.g. mapping 0-1 to\n   * 0-10.\n   */\n  interpolate(config: InterpolationConfigType): AnimatedInterpolation {\n    return new AnimatedInterpolation(this, config);\n  }\n\n  /**\n   * Typically only used internally, but could be used by a custom Animation\n   * class.\n   *\n   * See http://facebook.github.io/react-native/docs/animatedvalue.html#animate\n   */\n  animate(animation: Animation, callback: ?EndCallback): void {\n    let handle = null;\n    if (animation.__isInteraction) {\n      handle = InteractionManager.createInteractionHandle();\n    }\n    const previousAnimation = this._animation;\n    this._animation && this._animation.stop();\n    this._animation = animation;\n    animation.start(\n      this._value,\n      value => {\n        // Natively driven animations will never call into that callback, therefore we can always\n        // pass flush = true to allow the updated value to propagate to native with setNativeProps\n        this._updateValue(value, true /* flush */);\n      },\n      result => {\n        this._animation = null;\n        if (handle !== null) {\n          InteractionManager.clearInteractionHandle(handle);\n        }\n        callback && callback(result);\n      },\n      previousAnimation,\n      this,\n    );\n  }\n\n  /**\n   * Typically only used internally.\n   */\n  stopTracking(): void {\n    this._tracking && this._tracking.__detach();\n    this._tracking = null;\n  }\n\n  /**\n   * Typically only used internally.\n   */\n  track(tracking: AnimatedTracking): void {\n    this.stopTracking();\n    this._tracking = tracking;\n  }\n\n  _updateValue(value: number, flush: boolean): void {\n    this._value = value;\n    if (flush) {\n      _flush(this);\n    }\n    for (const key in this._listeners) {\n      this._listeners[key]({value: this.__getValue()});\n    }\n  }\n\n  __getNativeConfig(): Object {\n    return {\n      type: 'value',\n      value: this._value,\n      offset: this._offset,\n    };\n  }\n}\n\nmodule.exports = AnimatedValue;\n"]}