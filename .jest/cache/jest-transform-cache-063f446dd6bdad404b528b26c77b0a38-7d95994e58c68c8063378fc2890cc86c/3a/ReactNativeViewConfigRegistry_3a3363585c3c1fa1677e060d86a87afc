a16e6c9d992cda62bb6d1379ae200650
'use strict';

var invariant = require('fbjs/lib/invariant');

var customBubblingEventTypes = {};
var customDirectEventTypes = {};
var eventTypes = {};
exports.customBubblingEventTypes = customBubblingEventTypes;
exports.customDirectEventTypes = customDirectEventTypes;
exports.eventTypes = eventTypes;
var viewConfigCallbacks = new Map();
var viewConfigs = new Map();

function processEventTypes(viewConfig) {
  var bubblingEventTypes = viewConfig.bubblingEventTypes,
      directEventTypes = viewConfig.directEventTypes;

  if (__DEV__) {
    if (bubblingEventTypes != null && directEventTypes != null) {
      for (var topLevelType in directEventTypes) {
        invariant(bubblingEventTypes[topLevelType] == null, 'Event cannot be both direct and bubbling: %s', topLevelType);
      }
    }
  }

  if (bubblingEventTypes != null) {
    for (var _topLevelType in bubblingEventTypes) {
      if (customBubblingEventTypes[_topLevelType] == null) {
        eventTypes[_topLevelType] = customBubblingEventTypes[_topLevelType] = bubblingEventTypes[_topLevelType];
      }
    }
  }

  if (directEventTypes != null) {
    for (var _topLevelType2 in directEventTypes) {
      if (customDirectEventTypes[_topLevelType2] == null) {
        eventTypes[_topLevelType2] = customDirectEventTypes[_topLevelType2] = directEventTypes[_topLevelType2];
      }
    }
  }
}

exports.register = function (name, callback) {
  invariant(!viewConfigCallbacks.has(name), 'Tried to register two views with the same name %s', name);
  viewConfigCallbacks.set(name, callback);
  return name;
};

exports.get = function (name) {
  var viewConfig;

  if (!viewConfigs.has(name)) {
    var callback = viewConfigCallbacks.get(name);

    if (typeof callback !== 'function') {
      invariant(false, 'View config not found for name %s.%s', name, typeof name[0] === 'string' && /[a-z]/.test(name[0]) ? ' Make sure to start component names with a capital letter.' : '');
    }

    viewConfigCallbacks.set(name, null);
    viewConfig = callback();
    processEventTypes(viewConfig);
    viewConfigs.set(name, viewConfig);
  } else {
    viewConfig = viewConfigs.get(name);
  }

  invariant(viewConfig, 'View config not found for name %s', name);
  return viewConfig;
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlJlYWN0TmF0aXZlVmlld0NvbmZpZ1JlZ2lzdHJ5LmpzIl0sIm5hbWVzIjpbImludmFyaWFudCIsInJlcXVpcmUiLCJjdXN0b21CdWJibGluZ0V2ZW50VHlwZXMiLCJjdXN0b21EaXJlY3RFdmVudFR5cGVzIiwiZXZlbnRUeXBlcyIsImV4cG9ydHMiLCJ2aWV3Q29uZmlnQ2FsbGJhY2tzIiwiTWFwIiwidmlld0NvbmZpZ3MiLCJwcm9jZXNzRXZlbnRUeXBlcyIsInZpZXdDb25maWciLCJidWJibGluZ0V2ZW50VHlwZXMiLCJkaXJlY3RFdmVudFR5cGVzIiwiX19ERVZfXyIsInRvcExldmVsVHlwZSIsInJlZ2lzdGVyIiwibmFtZSIsImNhbGxiYWNrIiwiaGFzIiwic2V0IiwiZ2V0IiwidGVzdCJdLCJtYXBwaW5ncyI6IkFBVUE7O0FBT0EsSUFBTUEsU0FBUyxHQUFHQyxPQUFPLENBQUMsb0JBQUQsQ0FBekI7O0FBR0EsSUFBTUMsd0JBQXdCLEdBQUcsRUFBakM7QUFDQSxJQUFNQyxzQkFBc0IsR0FBRyxFQUEvQjtBQUNBLElBQU1DLFVBQVUsR0FBRyxFQUFuQjtBQUVBQyxPQUFPLENBQUNILHdCQUFSLEdBQW1DQSx3QkFBbkM7QUFDQUcsT0FBTyxDQUFDRixzQkFBUixHQUFpQ0Esc0JBQWpDO0FBQ0FFLE9BQU8sQ0FBQ0QsVUFBUixHQUFxQkEsVUFBckI7QUFFQSxJQUFNRSxtQkFBbUIsR0FBRyxJQUFJQyxHQUFKLEVBQTVCO0FBQ0EsSUFBTUMsV0FBVyxHQUFHLElBQUlELEdBQUosRUFBcEI7O0FBRUEsU0FBU0UsaUJBQVQsQ0FDRUMsVUFERixFQUVRO0FBQUEsTUFDQ0Msa0JBREQsR0FDeUNELFVBRHpDLENBQ0NDLGtCQUREO0FBQUEsTUFDcUJDLGdCQURyQixHQUN5Q0YsVUFEekMsQ0FDcUJFLGdCQURyQjs7QUFHTixNQUFJQyxPQUFKLEVBQWE7QUFDWCxRQUFJRixrQkFBa0IsSUFBSSxJQUF0QixJQUE4QkMsZ0JBQWdCLElBQUksSUFBdEQsRUFBNEQ7QUFDMUQsV0FBSyxJQUFNRSxZQUFYLElBQTJCRixnQkFBM0IsRUFBNkM7QUFDM0NaLFFBQUFBLFNBQVMsQ0FDUFcsa0JBQWtCLENBQUNHLFlBQUQsQ0FBbEIsSUFBb0MsSUFEN0IsRUFFUCw4Q0FGTyxFQUdQQSxZQUhPLENBQVQ7QUFLRDtBQUNGO0FBQ0Y7O0FBRUQsTUFBSUgsa0JBQWtCLElBQUksSUFBMUIsRUFBZ0M7QUFDOUIsU0FBSyxJQUFNRyxhQUFYLElBQTJCSCxrQkFBM0IsRUFBK0M7QUFDN0MsVUFBSVQsd0JBQXdCLENBQUNZLGFBQUQsQ0FBeEIsSUFBMEMsSUFBOUMsRUFBb0Q7QUFDbERWLFFBQUFBLFVBQVUsQ0FBQ1UsYUFBRCxDQUFWLEdBQTJCWix3QkFBd0IsQ0FBQ1ksYUFBRCxDQUF4QixHQUN6Qkgsa0JBQWtCLENBQUNHLGFBQUQsQ0FEcEI7QUFFRDtBQUNGO0FBQ0Y7O0FBRUQsTUFBSUYsZ0JBQWdCLElBQUksSUFBeEIsRUFBOEI7QUFDNUIsU0FBSyxJQUFNRSxjQUFYLElBQTJCRixnQkFBM0IsRUFBNkM7QUFDM0MsVUFBSVQsc0JBQXNCLENBQUNXLGNBQUQsQ0FBdEIsSUFBd0MsSUFBNUMsRUFBa0Q7QUFDaERWLFFBQUFBLFVBQVUsQ0FBQ1UsY0FBRCxDQUFWLEdBQTJCWCxzQkFBc0IsQ0FBQ1csY0FBRCxDQUF0QixHQUN6QkYsZ0JBQWdCLENBQUNFLGNBQUQsQ0FEbEI7QUFFRDtBQUNGO0FBQ0Y7QUFDRjs7QUFRRFQsT0FBTyxDQUFDVSxRQUFSLEdBQW1CLFVBQVNDLElBQVQsRUFBdUJDLFFBQXZCLEVBQTJEO0FBQzVFakIsRUFBQUEsU0FBUyxDQUNQLENBQUNNLG1CQUFtQixDQUFDWSxHQUFwQixDQUF3QkYsSUFBeEIsQ0FETSxFQUVQLG1EQUZPLEVBR1BBLElBSE8sQ0FBVDtBQUtBVixFQUFBQSxtQkFBbUIsQ0FBQ2EsR0FBcEIsQ0FBd0JILElBQXhCLEVBQThCQyxRQUE5QjtBQUNBLFNBQU9ELElBQVA7QUFDRCxDQVJEOztBQWVBWCxPQUFPLENBQUNlLEdBQVIsR0FBYyxVQUFTSixJQUFULEVBQTZEO0FBQ3pFLE1BQUlOLFVBQUo7O0FBQ0EsTUFBSSxDQUFDRixXQUFXLENBQUNVLEdBQVosQ0FBZ0JGLElBQWhCLENBQUwsRUFBNEI7QUFDMUIsUUFBTUMsUUFBUSxHQUFHWCxtQkFBbUIsQ0FBQ2MsR0FBcEIsQ0FBd0JKLElBQXhCLENBQWpCOztBQUNBLFFBQUksT0FBT0MsUUFBUCxLQUFvQixVQUF4QixFQUFvQztBQUNsQ2pCLE1BQUFBLFNBQVMsQ0FDUCxLQURPLEVBRVAsc0NBRk8sRUFHUGdCLElBSE8sRUFJUCxPQUFPQSxJQUFJLENBQUMsQ0FBRCxDQUFYLEtBQW1CLFFBQW5CLElBQStCLFFBQVFLLElBQVIsQ0FBYUwsSUFBSSxDQUFDLENBQUQsQ0FBakIsQ0FBL0IsR0FDSSw0REFESixHQUVJLEVBTkcsQ0FBVDtBQVFEOztBQUNEVixJQUFBQSxtQkFBbUIsQ0FBQ2EsR0FBcEIsQ0FBd0JILElBQXhCLEVBQThCLElBQTlCO0FBQ0FOLElBQUFBLFVBQVUsR0FBR08sUUFBUSxFQUFyQjtBQUNBUixJQUFBQSxpQkFBaUIsQ0FBQ0MsVUFBRCxDQUFqQjtBQUNBRixJQUFBQSxXQUFXLENBQUNXLEdBQVosQ0FBZ0JILElBQWhCLEVBQXNCTixVQUF0QjtBQUNELEdBaEJELE1BZ0JPO0FBQ0xBLElBQUFBLFVBQVUsR0FBR0YsV0FBVyxDQUFDWSxHQUFaLENBQWdCSixJQUFoQixDQUFiO0FBQ0Q7O0FBQ0RoQixFQUFBQSxTQUFTLENBQUNVLFVBQUQsRUFBYSxtQ0FBYixFQUFrRE0sSUFBbEQsQ0FBVDtBQUNBLFNBQU9OLFVBQVA7QUFDRCxDQXZCRCIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGZvcm1hdFxuICogQGZsb3cgc3RyaWN0LWxvY2FsXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgdHlwZSB7XG4gIFJlYWN0TmF0aXZlQmFzZUNvbXBvbmVudFZpZXdDb25maWcsXG4gIFZpZXdDb25maWdHZXR0ZXIsXG59IGZyb20gJy4vUmVhY3ROYXRpdmVUeXBlcyc7XG5cbmNvbnN0IGludmFyaWFudCA9IHJlcXVpcmUoJ2ZianMvbGliL2ludmFyaWFudCcpO1xuXG4vLyBFdmVudCBjb25maWdzXG5jb25zdCBjdXN0b21CdWJibGluZ0V2ZW50VHlwZXMgPSB7fTtcbmNvbnN0IGN1c3RvbURpcmVjdEV2ZW50VHlwZXMgPSB7fTtcbmNvbnN0IGV2ZW50VHlwZXMgPSB7fTtcblxuZXhwb3J0cy5jdXN0b21CdWJibGluZ0V2ZW50VHlwZXMgPSBjdXN0b21CdWJibGluZ0V2ZW50VHlwZXM7XG5leHBvcnRzLmN1c3RvbURpcmVjdEV2ZW50VHlwZXMgPSBjdXN0b21EaXJlY3RFdmVudFR5cGVzO1xuZXhwb3J0cy5ldmVudFR5cGVzID0gZXZlbnRUeXBlcztcblxuY29uc3Qgdmlld0NvbmZpZ0NhbGxiYWNrcyA9IG5ldyBNYXAoKTtcbmNvbnN0IHZpZXdDb25maWdzID0gbmV3IE1hcCgpO1xuXG5mdW5jdGlvbiBwcm9jZXNzRXZlbnRUeXBlcyhcbiAgdmlld0NvbmZpZzogUmVhY3ROYXRpdmVCYXNlQ29tcG9uZW50Vmlld0NvbmZpZzw+LFxuKTogdm9pZCB7XG4gIGNvbnN0IHtidWJibGluZ0V2ZW50VHlwZXMsIGRpcmVjdEV2ZW50VHlwZXN9ID0gdmlld0NvbmZpZztcblxuICBpZiAoX19ERVZfXykge1xuICAgIGlmIChidWJibGluZ0V2ZW50VHlwZXMgIT0gbnVsbCAmJiBkaXJlY3RFdmVudFR5cGVzICE9IG51bGwpIHtcbiAgICAgIGZvciAoY29uc3QgdG9wTGV2ZWxUeXBlIGluIGRpcmVjdEV2ZW50VHlwZXMpIHtcbiAgICAgICAgaW52YXJpYW50KFxuICAgICAgICAgIGJ1YmJsaW5nRXZlbnRUeXBlc1t0b3BMZXZlbFR5cGVdID09IG51bGwsXG4gICAgICAgICAgJ0V2ZW50IGNhbm5vdCBiZSBib3RoIGRpcmVjdCBhbmQgYnViYmxpbmc6ICVzJyxcbiAgICAgICAgICB0b3BMZXZlbFR5cGUsXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgaWYgKGJ1YmJsaW5nRXZlbnRUeXBlcyAhPSBudWxsKSB7XG4gICAgZm9yIChjb25zdCB0b3BMZXZlbFR5cGUgaW4gYnViYmxpbmdFdmVudFR5cGVzKSB7XG4gICAgICBpZiAoY3VzdG9tQnViYmxpbmdFdmVudFR5cGVzW3RvcExldmVsVHlwZV0gPT0gbnVsbCkge1xuICAgICAgICBldmVudFR5cGVzW3RvcExldmVsVHlwZV0gPSBjdXN0b21CdWJibGluZ0V2ZW50VHlwZXNbdG9wTGV2ZWxUeXBlXSA9XG4gICAgICAgICAgYnViYmxpbmdFdmVudFR5cGVzW3RvcExldmVsVHlwZV07XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgaWYgKGRpcmVjdEV2ZW50VHlwZXMgIT0gbnVsbCkge1xuICAgIGZvciAoY29uc3QgdG9wTGV2ZWxUeXBlIGluIGRpcmVjdEV2ZW50VHlwZXMpIHtcbiAgICAgIGlmIChjdXN0b21EaXJlY3RFdmVudFR5cGVzW3RvcExldmVsVHlwZV0gPT0gbnVsbCkge1xuICAgICAgICBldmVudFR5cGVzW3RvcExldmVsVHlwZV0gPSBjdXN0b21EaXJlY3RFdmVudFR5cGVzW3RvcExldmVsVHlwZV0gPVxuICAgICAgICAgIGRpcmVjdEV2ZW50VHlwZXNbdG9wTGV2ZWxUeXBlXTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBSZWdpc3RlcnMgYSBuYXRpdmUgdmlldy9jb21wb25lbnQgYnkgbmFtZS5cbiAqIEEgY2FsbGJhY2sgaXMgcHJvdmlkZWQgdG8gbG9hZCB0aGUgdmlldyBjb25maWcgZnJvbSBVSU1hbmFnZXIuXG4gKiBUaGUgY2FsbGJhY2sgaXMgZGVmZXJyZWQgdW50aWwgdGhlIHZpZXcgaXMgYWN0dWFsbHkgcmVuZGVyZWQuXG4gKiBUaGlzIGlzIGRvbmUgdG8gYXZvaWQgY2F1c2luZyBQcmVwYWNrIGRlb3B0cy5cbiAqL1xuZXhwb3J0cy5yZWdpc3RlciA9IGZ1bmN0aW9uKG5hbWU6IHN0cmluZywgY2FsbGJhY2s6IFZpZXdDb25maWdHZXR0ZXIpOiBzdHJpbmcge1xuICBpbnZhcmlhbnQoXG4gICAgIXZpZXdDb25maWdDYWxsYmFja3MuaGFzKG5hbWUpLFxuICAgICdUcmllZCB0byByZWdpc3RlciB0d28gdmlld3Mgd2l0aCB0aGUgc2FtZSBuYW1lICVzJyxcbiAgICBuYW1lLFxuICApO1xuICB2aWV3Q29uZmlnQ2FsbGJhY2tzLnNldChuYW1lLCBjYWxsYmFjayk7XG4gIHJldHVybiBuYW1lO1xufTtcblxuLyoqXG4gKiBSZXRyaWV2ZXMgYSBjb25maWcgZm9yIHRoZSBzcGVjaWZpZWQgdmlldy5cbiAqIElmIHRoaXMgaXMgdGhlIGZpcnN0IHRpbWUgdGhlIHZpZXcgaGFzIGJlZW4gdXNlZCxcbiAqIFRoaXMgY29uZmlndXJhdGlvbiB3aWxsIGJlIGxhenktbG9hZGVkIGZyb20gVUlNYW5hZ2VyLlxuICovXG5leHBvcnRzLmdldCA9IGZ1bmN0aW9uKG5hbWU6IHN0cmluZyk6IFJlYWN0TmF0aXZlQmFzZUNvbXBvbmVudFZpZXdDb25maWc8PiB7XG4gIGxldCB2aWV3Q29uZmlnO1xuICBpZiAoIXZpZXdDb25maWdzLmhhcyhuYW1lKSkge1xuICAgIGNvbnN0IGNhbGxiYWNrID0gdmlld0NvbmZpZ0NhbGxiYWNrcy5nZXQobmFtZSk7XG4gICAgaWYgKHR5cGVvZiBjYWxsYmFjayAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgaW52YXJpYW50KFxuICAgICAgICBmYWxzZSxcbiAgICAgICAgJ1ZpZXcgY29uZmlnIG5vdCBmb3VuZCBmb3IgbmFtZSAlcy4lcycsXG4gICAgICAgIG5hbWUsXG4gICAgICAgIHR5cGVvZiBuYW1lWzBdID09PSAnc3RyaW5nJyAmJiAvW2Etel0vLnRlc3QobmFtZVswXSlcbiAgICAgICAgICA/ICcgTWFrZSBzdXJlIHRvIHN0YXJ0IGNvbXBvbmVudCBuYW1lcyB3aXRoIGEgY2FwaXRhbCBsZXR0ZXIuJ1xuICAgICAgICAgIDogJycsXG4gICAgICApO1xuICAgIH1cbiAgICB2aWV3Q29uZmlnQ2FsbGJhY2tzLnNldChuYW1lLCBudWxsKTtcbiAgICB2aWV3Q29uZmlnID0gY2FsbGJhY2soKTtcbiAgICBwcm9jZXNzRXZlbnRUeXBlcyh2aWV3Q29uZmlnKTtcbiAgICB2aWV3Q29uZmlncy5zZXQobmFtZSwgdmlld0NvbmZpZyk7XG4gIH0gZWxzZSB7XG4gICAgdmlld0NvbmZpZyA9IHZpZXdDb25maWdzLmdldChuYW1lKTtcbiAgfVxuICBpbnZhcmlhbnQodmlld0NvbmZpZywgJ1ZpZXcgY29uZmlnIG5vdCBmb3VuZCBmb3IgbmFtZSAlcycsIG5hbWUpO1xuICByZXR1cm4gdmlld0NvbmZpZztcbn07XG4iXX0=