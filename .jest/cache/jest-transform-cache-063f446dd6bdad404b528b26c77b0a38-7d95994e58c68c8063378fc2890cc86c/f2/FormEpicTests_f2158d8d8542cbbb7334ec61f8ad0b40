0d92ca503a0b7558314305f1ff7c2fc9
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _Epics = _interopRequireWildcard(require("../Send/Epics"));

var _reduxObservable = require("redux-observable");

var _ActionTypes = require("../ActionTypes");

var _rxjs = require("rxjs");

var _this = this;

var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {
  return new (P || (P = Promise))(function (resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }

    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }

    function step(result) {
      result.done ? resolve(result.value) : new P(function (resolve) {
        resolve(result.value);
      }).then(fulfilled, rejected);
    }

    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};

describe('Form validation shoudl function correctly', function () {
  var store = {
    value: {
      account: {
        totalAvailable: 1000,
        totalSent: 0
      }
    }
  };
  it("send should submit successfully", function () {
    return __awaiter(_this, void 0, void 0, _regenerator.default.mark(function _callee() {
      var transaction, action, actionObservable, result, actions;
      return _regenerator.default.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              transaction = {
                name: '',
                email: '',
                amount: '100'
              };
              action = {
                type: _ActionTypes.TypeKeys.SEND_MONEY,
                transaction: transaction
              };
              actionObservable = new _reduxObservable.ActionsObservable((0, _rxjs.of)(action));
              result = (0, _Epics.default)(actionObservable, store);
              _context.next = 6;
              return result.toPromise();

            case 6:
              actions = _context.sent;
              expect(actions).toEqual({
                type: _ActionTypes.TypeKeys.SEND_MONEY_SUCCESS,
                transaction: transaction
              });

            case 8:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this);
    }));
  });
  it("send should fail because you dont have enough money", function () {
    return __awaiter(_this, void 0, void 0, _regenerator.default.mark(function _callee2() {
      var transaction, action, actionObservable, result, actions;
      return _regenerator.default.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              transaction = {
                name: '',
                email: '',
                amount: '1000000'
              };
              action = {
                type: _ActionTypes.TypeKeys.SEND_MONEY,
                transaction: transaction
              };
              actionObservable = new _reduxObservable.ActionsObservable((0, _rxjs.of)(action));
              result = (0, _Epics.default)(actionObservable, store);
              _context2.next = 6;
              return result.toPromise();

            case 6:
              actions = _context2.sent;
              expect(actions).toEqual({
                type: _ActionTypes.TypeKeys.SHOW_ERROR,
                title: _Epics.errorTitle,
                message: _Epics.errorMessage
              });

            case 8:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2, this);
    }));
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9fX3Rlc3RzX18vRm9ybUVwaWNUZXN0cy50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBRUE7O0FBRUE7O0FBQ0E7O0FBQ0E7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBR1EsUUFBUSxDQUFDLDJDQUFELEVBQThDLFlBQUs7QUFHdkQsTUFBTSxLQUFLLEdBQUc7QUFDVixJQUFBLEtBQUssRUFBRTtBQUNILE1BQUEsT0FBTyxFQUFFO0FBQ0wsUUFBQSxjQUFjLEVBQUUsSUFEWDtBQUVMLFFBQUEsU0FBUyxFQUFFO0FBRk47QUFETjtBQURHLEdBQWQ7QUFTQSxFQUFBLEVBQUUsb0NBQW9DO0FBQUEsV0FBVyxTQUFBLENBQUEsS0FBQSxFQUFBLEtBQUEsQ0FBQSxFQUFBLEtBQUEsQ0FBQSw0QkFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFDdkMsY0FBQSxXQUR1QyxHQUNaO0FBQ3pCLGdCQUFBLElBQUksRUFBRSxFQURtQjtBQUV6QixnQkFBQSxLQUFLLEVBQUUsRUFGa0I7QUFHekIsZ0JBQUEsTUFBTSxFQUFFO0FBSGlCLGVBRFk7QUFPdkMsY0FBQSxNQVB1QyxHQU9iO0FBQzVCLGdCQUFBLElBQUksRUFBRSxzQkFBUyxVQURhO0FBRTVCLGdCQUFBLFdBQVcsRUFBWDtBQUY0QixlQVBhO0FBWXZDLGNBQUEsZ0JBWnVDLEdBWXBCLElBQUksa0NBQUosQ0FBaUMsY0FBSSxNQUFKLENBQWpDLENBWm9CO0FBYXZDLGNBQUEsTUFidUMsR0FhOUIsb0JBQVMsZ0JBQVQsRUFBMkIsS0FBM0IsQ0FiOEI7QUFBQTtBQWM3QixxQkFBTSxNQUFNLENBQUMsU0FBUCxFQUFOOztBQWQ2QjtBQWN2QyxjQUFBLE9BZHVDO0FBZ0I3QyxjQUFBLE1BQU0sQ0FBRSxPQUFGLENBQU4sQ0FBa0IsT0FBbEIsQ0FBMEI7QUFBRSxnQkFBQSxJQUFJLEVBQUUsc0JBQVMsa0JBQWpCO0FBQXFDLGdCQUFBLFdBQVcsRUFBWDtBQUFyQyxlQUExQjs7QUFoQjZDO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEtBQUEsRUFBWDtBQUFBLEdBQXBDLENBQUY7QUFtQkEsRUFBQSxFQUFFLHdEQUF3RDtBQUFBLFdBQVcsU0FBQSxDQUFBLEtBQUEsRUFBQSxLQUFBLENBQUEsRUFBQSxLQUFBLENBQUEsNEJBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQzNELGNBQUEsV0FEMkQsR0FDaEM7QUFDekIsZ0JBQUEsSUFBSSxFQUFFLEVBRG1CO0FBRXpCLGdCQUFBLEtBQUssRUFBRSxFQUZrQjtBQUd6QixnQkFBQSxNQUFNLEVBQUU7QUFIaUIsZUFEZ0M7QUFPM0QsY0FBQSxNQVAyRCxHQU9qQztBQUM1QixnQkFBQSxJQUFJLEVBQUUsc0JBQVMsVUFEYTtBQUU1QixnQkFBQSxXQUFXLEVBQVg7QUFGNEIsZUFQaUM7QUFZM0QsY0FBQSxnQkFaMkQsR0FZeEMsSUFBSSxrQ0FBSixDQUFpQyxjQUFJLE1BQUosQ0FBakMsQ0Fad0M7QUFhM0QsY0FBQSxNQWIyRCxHQWFsRCxvQkFBUyxnQkFBVCxFQUEyQixLQUEzQixDQWJrRDtBQUFBO0FBY2pELHFCQUFNLE1BQU0sQ0FBQyxTQUFQLEVBQU47O0FBZGlEO0FBYzNELGNBQUEsT0FkMkQ7QUFlakUsY0FBQSxNQUFNLENBQUUsT0FBRixDQUFOLENBQWtCLE9BQWxCLENBQTBCO0FBQUUsZ0JBQUEsSUFBSSxFQUFFLHNCQUFTLFVBQWpCO0FBQTZCLGdCQUFBLEtBQUssRUFBRSxpQkFBcEM7QUFBZ0QsZ0JBQUEsT0FBTyxFQUFFO0FBQXpELGVBQTFCOztBQWZpRTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxLQUFBLEVBQVg7QUFBQSxHQUF4RCxDQUFGO0FBaUJELENBaERLLENBQVIiLCJzb3VyY2VSb290IjoiIn0=