35327d52bf5136f59a04f6ddf8702402
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var EmitterSubscription = require('EmitterSubscription');

var EventSubscriptionVendor = require('EventSubscriptionVendor');

var emptyFunction = require('fbjs/lib/emptyFunction');

var invariant = require('fbjs/lib/invariant');

var EventEmitter = function () {
  function EventEmitter(subscriber) {
    (0, _classCallCheck2.default)(this, EventEmitter);
    this._subscriber = subscriber || new EventSubscriptionVendor();
  }

  (0, _createClass2.default)(EventEmitter, [{
    key: "addListener",
    value: function addListener(eventType, listener, context) {
      return this._subscriber.addSubscription(eventType, new EmitterSubscription(this, this._subscriber, listener, context));
    }
  }, {
    key: "once",
    value: function once(eventType, listener, context) {
      var _this = this;

      return this.addListener(eventType, function () {
        _this.removeCurrentListener();

        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        listener.apply(context, args);
      });
    }
  }, {
    key: "removeAllListeners",
    value: function removeAllListeners(eventType) {
      this._subscriber.removeAllSubscriptions(eventType);
    }
  }, {
    key: "removeCurrentListener",
    value: function removeCurrentListener() {
      invariant(!!this._currentSubscription, 'Not in an emitting cycle; there is no current subscription');
      this.removeSubscription(this._currentSubscription);
    }
  }, {
    key: "removeSubscription",
    value: function removeSubscription(subscription) {
      invariant(subscription.emitter === this, 'Subscription does not belong to this emitter.');

      this._subscriber.removeSubscription(subscription);
    }
  }, {
    key: "listeners",
    value: function listeners(eventType) {
      var subscriptions = this._subscriber.getSubscriptionsForType(eventType);

      return subscriptions ? subscriptions.filter(emptyFunction.thatReturnsTrue).map(function (subscription) {
        return subscription.listener;
      }) : [];
    }
  }, {
    key: "emit",
    value: function emit(eventType) {
      var subscriptions = this._subscriber.getSubscriptionsForType(eventType);

      if (subscriptions) {
        for (var i = 0, l = subscriptions.length; i < l; i++) {
          var subscription = subscriptions[i];

          if (subscription) {
            this._currentSubscription = subscription;
            subscription.listener.apply(subscription.context, Array.prototype.slice.call(arguments, 1));
          }
        }

        this._currentSubscription = null;
      }
    }
  }, {
    key: "removeListener",
    value: function removeListener(eventType, listener) {
      var subscriptions = this._subscriber.getSubscriptionsForType(eventType);

      if (subscriptions) {
        for (var i = 0, l = subscriptions.length; i < l; i++) {
          var subscription = subscriptions[i];

          if (subscription && subscription.listener === listener) {
            subscription.remove();
          }
        }
      }
    }
  }]);
  return EventEmitter;
}();

module.exports = EventEmitter;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkV2ZW50RW1pdHRlci5qcyJdLCJuYW1lcyI6WyJFbWl0dGVyU3Vic2NyaXB0aW9uIiwicmVxdWlyZSIsIkV2ZW50U3Vic2NyaXB0aW9uVmVuZG9yIiwiZW1wdHlGdW5jdGlvbiIsImludmFyaWFudCIsIkV2ZW50RW1pdHRlciIsInN1YnNjcmliZXIiLCJfc3Vic2NyaWJlciIsImV2ZW50VHlwZSIsImxpc3RlbmVyIiwiY29udGV4dCIsImFkZFN1YnNjcmlwdGlvbiIsImFkZExpc3RlbmVyIiwicmVtb3ZlQ3VycmVudExpc3RlbmVyIiwiYXJncyIsImFwcGx5IiwicmVtb3ZlQWxsU3Vic2NyaXB0aW9ucyIsIl9jdXJyZW50U3Vic2NyaXB0aW9uIiwicmVtb3ZlU3Vic2NyaXB0aW9uIiwic3Vic2NyaXB0aW9uIiwiZW1pdHRlciIsInN1YnNjcmlwdGlvbnMiLCJnZXRTdWJzY3JpcHRpb25zRm9yVHlwZSIsImZpbHRlciIsInRoYXRSZXR1cm5zVHJ1ZSIsIm1hcCIsImkiLCJsIiwibGVuZ3RoIiwiQXJyYXkiLCJwcm90b3R5cGUiLCJzbGljZSIsImNhbGwiLCJhcmd1bWVudHMiLCJyZW1vdmUiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFXQTs7Ozs7Ozs7QUFFQSxJQUFNQSxtQkFBbUIsR0FBR0MsT0FBTyxDQUFDLHFCQUFELENBQW5DOztBQUNBLElBQU1DLHVCQUF1QixHQUFHRCxPQUFPLENBQUMseUJBQUQsQ0FBdkM7O0FBRUEsSUFBTUUsYUFBYSxHQUFHRixPQUFPLENBQUMsd0JBQUQsQ0FBN0I7O0FBQ0EsSUFBTUcsU0FBUyxHQUFHSCxPQUFPLENBQUMsb0JBQUQsQ0FBekI7O0lBZU1JLFk7QUFVSix3QkFBWUMsVUFBWixFQUFrRDtBQUFBO0FBQ2hELFNBQUtDLFdBQUwsR0FBbUJELFVBQVUsSUFBSSxJQUFJSix1QkFBSixFQUFqQztBQUNEOzs7O2dDQWlCQ00sUyxFQUNBQyxRLEVBQ0FDLE8sRUFDcUI7QUFDckIsYUFBUSxLQUFLSCxX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LE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQi9CLFlBQWpCIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZm9ybWF0XG4gKiBAbm9mbG93XG4gKiBAdHlwZWNoZWNrXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBFbWl0dGVyU3Vic2NyaXB0aW9uID0gcmVxdWlyZSgnRW1pdHRlclN1YnNjcmlwdGlvbicpO1xuY29uc3QgRXZlbnRTdWJzY3JpcHRpb25WZW5kb3IgPSByZXF1aXJlKCdFdmVudFN1YnNjcmlwdGlvblZlbmRvcicpO1xuXG5jb25zdCBlbXB0eUZ1bmN0aW9uID0gcmVxdWlyZSgnZmJqcy9saWIvZW1wdHlGdW5jdGlvbicpO1xuY29uc3QgaW52YXJpYW50ID0gcmVxdWlyZSgnZmJqcy9saWIvaW52YXJpYW50Jyk7XG5cbi8qKlxuICogQGNsYXNzIEV2ZW50RW1pdHRlclxuICogQGRlc2NyaXB0aW9uXG4gKiBBbiBFdmVudEVtaXR0ZXIgaXMgcmVzcG9uc2libGUgZm9yIG1hbmFnaW5nIGEgc2V0IG9mIGxpc3RlbmVycyBhbmQgcHVibGlzaGluZ1xuICogZXZlbnRzIHRvIHRoZW0gd2hlbiBpdCBpcyB0b2xkIHRoYXQgc3VjaCBldmVudHMgaGFwcGVuZWQuIEluIGFkZGl0aW9uIHRvIHRoZVxuICogZGF0YSBmb3IgdGhlIGdpdmVuIGV2ZW50IGl0IGFsc28gc2VuZHMgYSBldmVudCBjb250cm9sIG9iamVjdCB3aGljaCBhbGxvd3NcbiAqIHRoZSBsaXN0ZW5lcnMvaGFuZGxlcnMgdG8gcHJldmVudCB0aGUgZGVmYXVsdCBiZWhhdmlvciBvZiB0aGUgZ2l2ZW4gZXZlbnQuXG4gKlxuICogVGhlIGVtaXR0ZXIgaXMgZGVzaWduZWQgdG8gYmUgZ2VuZXJpYyBlbm91Z2ggdG8gc3VwcG9ydCBhbGwgdGhlIGRpZmZlcmVudFxuICogY29udGV4dHMgaW4gd2hpY2ggb25lIG1pZ2h0IHdhbnQgdG8gZW1pdCBldmVudHMuIEl0IGlzIGEgc2ltcGxlIG11bHRpY2FzdFxuICogbWVjaGFuaXNtIG9uIHRvcCBvZiB3aGljaCBleHRyYSBmdW5jdGlvbmFsaXR5IGNhbiBiZSBjb21wb3NlZC4gRm9yIGV4YW1wbGUsIGFcbiAqIG1vcmUgYWR2YW5jZWQgZW1pdHRlciBtYXkgdXNlIGFuIEV2ZW50SG9sZGVyIGFuZCBFdmVudEZhY3RvcnkuXG4gKi9cbmNsYXNzIEV2ZW50RW1pdHRlciB7XG4gIF9zdWJzY3JpYmVyOiBFdmVudFN1YnNjcmlwdGlvblZlbmRvcjtcbiAgX2N1cnJlbnRTdWJzY3JpcHRpb246ID9FbWl0dGVyU3Vic2NyaXB0aW9uO1xuXG4gIC8qKlxuICAgKiBAY29uc3RydWN0b3JcbiAgICpcbiAgICogQHBhcmFtIHtFdmVudFN1YnNjcmlwdGlvblZlbmRvcn0gc3Vic2NyaWJlciAtIE9wdGlvbmFsIHN1YnNjcmliZXIgaW5zdGFuY2VcbiAgICogICB0byB1c2UuIElmIG9taXR0ZWQsIGEgbmV3IHN1YnNjcmliZXIgd2lsbCBiZSBjcmVhdGVkIGZvciB0aGUgZW1pdHRlci5cbiAgICovXG4gIGNvbnN0cnVjdG9yKHN1YnNjcmliZXI6ID9FdmVudFN1YnNjcmlwdGlvblZlbmRvcikge1xuICAgIHRoaXMuX3N1YnNjcmliZXIgPSBzdWJzY3JpYmVyIHx8IG5ldyBFdmVudFN1YnNjcmlwdGlvblZlbmRvcigpO1xuICB9XG5cbiAgLyoqXG4gICAqIEFkZHMgYSBsaXN0ZW5lciB0byBiZSBpbnZva2VkIHdoZW4gZXZlbnRzIG9mIHRoZSBzcGVjaWZpZWQgdHlwZSBhcmVcbiAgICogZW1pdHRlZC4gQW4gb3B0aW9uYWwgY2FsbGluZyBjb250ZXh0IG1heSBiZSBwcm92aWRlZC4gVGhlIGRhdGEgYXJndW1lbnRzXG4gICAqIGVtaXR0ZWQgd2lsbCBiZSBwYXNzZWQgdG8gdGhlIGxpc3RlbmVyIGZ1bmN0aW9uLlxuICAgKlxuICAgKiBUT0RPOiBBbm5vdGF0ZSB0aGUgbGlzdGVuZXIgYXJnJ3MgdHlwZS4gVGhpcyBpcyB0cmlja3kgYmVjYXVzZSBsaXN0ZW5lcnNcbiAgICogICAgICAgY2FuIGJlIGludm9rZWQgd2l0aCB2YXJhcmdzLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gZXZlbnRUeXBlIC0gTmFtZSBvZiB0aGUgZXZlbnQgdG8gbGlzdGVuIHRvXG4gICAqIEBwYXJhbSB7ZnVuY3Rpb259IGxpc3RlbmVyIC0gRnVuY3Rpb24gdG8gaW52b2tlIHdoZW4gdGhlIHNwZWNpZmllZCBldmVudCBpc1xuICAgKiAgIGVtaXR0ZWRcbiAgICogQHBhcmFtIHsqfSBjb250ZXh0IC0gT3B0aW9uYWwgY29udGV4dCBvYmplY3QgdG8gdXNlIHdoZW4gaW52b2tpbmcgdGhlXG4gICAqICAgbGlzdGVuZXJcbiAgICovXG4gIGFkZExpc3RlbmVyKFxuICAgIGV2ZW50VHlwZTogc3RyaW5nLFxuICAgIGxpc3RlbmVyOiBGdW5jdGlvbixcbiAgICBjb250ZXh0OiA/T2JqZWN0LFxuICApOiBFbWl0dGVyU3Vic2NyaXB0aW9uIHtcbiAgICByZXR1cm4gKHRoaXMuX3N1YnNjcmliZXIuYWRkU3Vic2NyaXB0aW9uKFxuICAgICAgZXZlbnRUeXBlLFxuICAgICAgbmV3IEVtaXR0ZXJTdWJzY3JpcHRpb24odGhpcywgdGhpcy5fc3Vic2NyaWJlciwgbGlzdGVuZXIsIGNvbnRleHQpLFxuICAgICk6IGFueSk7XG4gIH1cblxuICAvKipcbiAgICogU2ltaWxhciB0byBhZGRMaXN0ZW5lciwgZXhjZXB0IHRoYXQgdGhlIGxpc3RlbmVyIGlzIHJlbW92ZWQgYWZ0ZXIgaXQgaXNcbiAgICogaW52b2tlZCBvbmNlLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gZXZlbnRUeXBlIC0gTmFtZSBvZiB0aGUgZXZlbnQgdG8gbGlzdGVuIHRvXG4gICAqIEBwYXJhbSB7ZnVuY3Rpb259IGxpc3RlbmVyIC0gRnVuY3Rpb24gdG8gaW52b2tlIG9ubHkgb25jZSB3aGVuIHRoZVxuICAgKiAgIHNwZWNpZmllZCBldmVudCBpcyBlbWl0dGVkXG4gICAqIEBwYXJhbSB7Kn0gY29udGV4dCAtIE9wdGlvbmFsIGNvbnRleHQgb2JqZWN0IHRvIHVzZSB3aGVuIGludm9raW5nIHRoZVxuICAgKiAgIGxpc3RlbmVyXG4gICAqL1xuICBvbmNlKFxuICAgIGV2ZW50VHlwZTogc3RyaW5nLFxuICAgIGxpc3RlbmVyOiBGdW5jdGlvbixcbiAgICBjb250ZXh0OiA/T2JqZWN0LFxuICApOiBFbWl0dGVyU3Vic2NyaXB0aW9uIHtcbiAgICByZXR1cm4gdGhpcy5hZGRMaXN0ZW5lcihldmVudFR5cGUsICguLi5hcmdzKSA9PiB7XG4gICAgICB0aGlzLnJlbW92ZUN1cnJlbnRMaXN0ZW5lcigpO1xuICAgICAgbGlzdGVuZXIuYXBwbHkoY29udGV4dCwgYXJncyk7XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogUmVtb3ZlcyBhbGwgb2YgdGhlIHJlZ2lzdGVyZWQgbGlzdGVuZXJzLCBpbmNsdWRpbmcgdGhvc2UgcmVnaXN0ZXJlZCBhc1xuICAgKiBsaXN0ZW5lciBtYXBzLlxuICAgKlxuICAgKiBAcGFyYW0gez9zdHJpbmd9IGV2ZW50VHlwZSAtIE9wdGlvbmFsIG5hbWUgb2YgdGhlIGV2ZW50IHdob3NlIHJlZ2lzdGVyZWRcbiAgICogICBsaXN0ZW5lcnMgdG8gcmVtb3ZlXG4gICAqL1xuICByZW1vdmVBbGxMaXN0ZW5lcnMoZXZlbnRUeXBlOiA/c3RyaW5nKSB7XG4gICAgdGhpcy5fc3Vic2NyaWJlci5yZW1vdmVBbGxTdWJzY3JpcHRpb25zKGV2ZW50VHlwZSk7XG4gIH1cblxuICAvKipcbiAgICogUHJvdmlkZXMgYW4gQVBJIHRoYXQgY2FuIGJlIGNhbGxlZCBkdXJpbmcgYW4gZXZlbnRpbmcgY3ljbGUgdG8gcmVtb3ZlIHRoZVxuICAgKiBsYXN0IGxpc3RlbmVyIHRoYXQgd2FzIGludm9rZWQuIFRoaXMgYWxsb3dzIGEgZGV2ZWxvcGVyIHRvIHByb3ZpZGUgYW4gZXZlbnRcbiAgICogb2JqZWN0IHRoYXQgY2FuIHJlbW92ZSB0aGUgbGlzdGVuZXIgKG9yIGxpc3RlbmVyIG1hcCkgZHVyaW5nIHRoZVxuICAgKiBpbnZvY2F0aW9uLlxuICAgKlxuICAgKiBJZiBpdCBpcyBjYWxsZWQgd2hlbiBub3QgaW5zaWRlIG9mIGFuIGVtaXR0aW5nIGN5Y2xlIGl0IHdpbGwgdGhyb3cuXG4gICAqXG4gICAqIEB0aHJvd3Mge0Vycm9yfSBXaGVuIGNhbGxlZCBub3QgZHVyaW5nIGFuIGV2ZW50aW5nIGN5Y2xlXG4gICAqXG4gICAqIEBleGFtcGxlXG4gICAqICAgdmFyIHN1YnNjcmlwdGlvbiA9IGVtaXR0ZXIuYWRkTGlzdGVuZXJNYXAoe1xuICAgKiAgICAgc29tZUV2ZW50OiBmdW5jdGlvbihkYXRhLCBldmVudCkge1xuICAgKiAgICAgICBjb25zb2xlLmxvZyhkYXRhKTtcbiAgICogICAgICAgZW1pdHRlci5yZW1vdmVDdXJyZW50TGlzdGVuZXIoKTtcbiAgICogICAgIH1cbiAgICogICB9KTtcbiAgICpcbiAgICogICBlbWl0dGVyLmVtaXQoJ3NvbWVFdmVudCcsICdhYmMnKTsgLy8gbG9ncyAnYWJjJ1xuICAgKiAgIGVtaXR0ZXIuZW1pdCgnc29tZUV2ZW50JywgJ2RlZicpOyAvLyBkb2VzIG5vdCBsb2cgYW55dGhpbmdcbiAgICovXG4gIHJlbW92ZUN1cnJlbnRMaXN0ZW5lcigpIHtcbiAgICBpbnZhcmlhbnQoXG4gICAgICAhIXRoaXMuX2N1cnJlbnRTdWJzY3JpcHRpb24sXG4gICAgICAnTm90IGluIGFuIGVtaXR0aW5nIGN5Y2xlOyB0aGVyZSBpcyBubyBjdXJyZW50IHN1YnNjcmlwdGlvbicsXG4gICAgKTtcbiAgICB0aGlzLnJlbW92ZVN1YnNjcmlwdGlvbih0aGlzLl9jdXJyZW50U3Vic2NyaXB0aW9uKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZW1vdmVzIGEgc3BlY2lmaWMgc3Vic2NyaXB0aW9uLiBDYWxsZWQgYnkgdGhlIGByZW1vdmUoKWAgbWV0aG9kIG9mIHRoZVxuICAgKiBzdWJzY3JpcHRpb24gaXRzZWxmIHRvIGVuc3VyZSBhbnkgbmVjZXNzYXJ5IGNsZWFudXAgaXMgcGVyZm9ybWVkLlxuICAgKi9cbiAgcmVtb3ZlU3Vic2NyaXB0aW9uKHN1YnNjcmlwdGlvbjogRW1pdHRlclN1YnNjcmlwdGlvbikge1xuICAgIGludmFyaWFudChcbiAgICAgIHN1YnNjcmlwdGlvbi5lbWl0dGVyID09PSB0aGlzLFxuICAgICAgJ1N1YnNjcmlwdGlvbiBkb2VzIG5vdCBiZWxvbmcgdG8gdGhpcyBlbWl0dGVyLicsXG4gICAgKTtcbiAgICB0aGlzLl9zdWJzY3JpYmVyLnJlbW92ZVN1YnNjcmlwdGlvbihzdWJzY3JpcHRpb24pO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgYW4gYXJyYXkgb2YgbGlzdGVuZXJzIHRoYXQgYXJlIGN1cnJlbnRseSByZWdpc3RlcmVkIGZvciB0aGUgZ2l2ZW5cbiAgICogZXZlbnQuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBldmVudFR5cGUgLSBOYW1lIG9mIHRoZSBldmVudCB0byBxdWVyeVxuICAgKiBAcmV0dXJucyB7YXJyYXl9XG4gICAqL1xuICBsaXN0ZW5lcnMoZXZlbnRUeXBlOiBzdHJpbmcpOiBbRW1pdHRlclN1YnNjcmlwdGlvbl0ge1xuICAgIGNvbnN0IHN1YnNjcmlwdGlvbnM6ID9bXG4gICAgICBFbWl0dGVyU3Vic2NyaXB0aW9uLFxuICAgIF0gPSAodGhpcy5fc3Vic2NyaWJlci5nZXRTdWJzY3JpcHRpb25zRm9yVHlwZShldmVudFR5cGUpOiBhbnkpO1xuICAgIHJldHVybiBzdWJzY3JpcHRpb25zXG4gICAgICA/IHN1YnNjcmlwdGlvbnNcbiAgICAgICAgICAuZmlsdGVyKGVtcHR5RnVuY3Rpb24udGhhdFJldHVybnNUcnVlKVxuICAgICAgICAgIC5tYXAoZnVuY3Rpb24oc3Vic2NyaXB0aW9uKSB7XG4gICAgICAgICAgICByZXR1cm4gc3Vic2NyaXB0aW9uLmxpc3RlbmVyO1xuICAgICAgICAgIH0pXG4gICAgICA6IFtdO1xuICB9XG5cbiAgLyoqXG4gICAqIEVtaXRzIGFuIGV2ZW50IG9mIHRoZSBnaXZlbiB0eXBlIHdpdGggdGhlIGdpdmVuIGRhdGEuIEFsbCBoYW5kbGVycyBvZiB0aGF0XG4gICAqIHBhcnRpY3VsYXIgdHlwZSB3aWxsIGJlIG5vdGlmaWVkLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gZXZlbnRUeXBlIC0gTmFtZSBvZiB0aGUgZXZlbnQgdG8gZW1pdFxuICAgKiBAcGFyYW0gey4uLip9IEFyYml0cmFyeSBhcmd1bWVudHMgdG8gYmUgcGFzc2VkIHRvIGVhY2ggcmVnaXN0ZXJlZCBsaXN0ZW5lclxuICAgKlxuICAgKiBAZXhhbXBsZVxuICAgKiAgIGVtaXR0ZXIuYWRkTGlzdGVuZXIoJ3NvbWVFdmVudCcsIGZ1bmN0aW9uKG1lc3NhZ2UpIHtcbiAgICogICAgIGNvbnNvbGUubG9nKG1lc3NhZ2UpO1xuICAgKiAgIH0pO1xuICAgKlxuICAgKiAgIGVtaXR0ZXIuZW1pdCgnc29tZUV2ZW50JywgJ2FiYycpOyAvLyBsb2dzICdhYmMnXG4gICAqL1xuICBlbWl0KGV2ZW50VHlwZTogc3RyaW5nKSB7XG4gICAgY29uc3Qgc3Vic2NyaXB0aW9uczogP1tcbiAgICAgIEVtaXR0ZXJTdWJzY3JpcHRpb24sXG4gICAgXSA9ICh0aGlzLl9zdWJzY3JpYmVyLmdldFN1YnNjcmlwdGlvbnNGb3JUeXBlKGV2ZW50VHlwZSk6IGFueSk7XG4gICAgaWYgKHN1YnNjcmlwdGlvbnMpIHtcbiAgICAgIGZvciAobGV0IGkgPSAwLCBsID0gc3Vic2NyaXB0aW9ucy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgY29uc3Qgc3Vic2NyaXB0aW9uID0gc3Vic2NyaXB0aW9uc1tpXTtcblxuICAgICAgICAvLyBUaGUgc3Vic2NyaXB0aW9uIG1heSBoYXZlIGJlZW4gcmVtb3ZlZCBkdXJpbmcgdGhpcyBldmVudCBsb29wLlxuICAgICAgICBpZiAoc3Vic2NyaXB0aW9uKSB7XG4gICAgICAgICAgdGhpcy5fY3VycmVudFN1YnNjcmlwdGlvbiA9IHN1YnNjcmlwdGlvbjtcbiAgICAgICAgICBzdWJzY3JpcHRpb24ubGlzdGVuZXIuYXBwbHkoXG4gICAgICAgICAgICBzdWJzY3JpcHRpb24uY29udGV4dCxcbiAgICAgICAgICAgIEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMSksXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgdGhpcy5fY3VycmVudFN1YnNjcmlwdGlvbiA9IG51bGw7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFJlbW92ZXMgdGhlIGdpdmVuIGxpc3RlbmVyIGZvciBldmVudCBvZiBzcGVjaWZpYyB0eXBlLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gZXZlbnRUeXBlIC0gTmFtZSBvZiB0aGUgZXZlbnQgdG8gZW1pdFxuICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBsaXN0ZW5lciAtIEZ1bmN0aW9uIHRvIGludm9rZSB3aGVuIHRoZSBzcGVjaWZpZWQgZXZlbnQgaXNcbiAgICogICBlbWl0dGVkXG4gICAqXG4gICAqIEBleGFtcGxlXG4gICAqICAgZW1pdHRlci5yZW1vdmVMaXN0ZW5lcignc29tZUV2ZW50JywgZnVuY3Rpb24obWVzc2FnZSkge1xuICAgKiAgICAgY29uc29sZS5sb2cobWVzc2FnZSk7XG4gICAqICAgfSk7IC8vIHJlbW92ZXMgdGhlIGxpc3RlbmVyIGlmIGFscmVhZHkgcmVnaXN0ZXJlZFxuICAgKlxuICAgKi9cbiAgcmVtb3ZlTGlzdGVuZXIoZXZlbnRUeXBlOiBTdHJpbmcsIGxpc3RlbmVyKSB7XG4gICAgY29uc3Qgc3Vic2NyaXB0aW9uczogP1tcbiAgICAgIEVtaXR0ZXJTdWJzY3JpcHRpb24sXG4gICAgXSA9ICh0aGlzLl9zdWJzY3JpYmVyLmdldFN1YnNjcmlwdGlvbnNGb3JUeXBlKGV2ZW50VHlwZSk6IGFueSk7XG4gICAgaWYgKHN1YnNjcmlwdGlvbnMpIHtcbiAgICAgIGZvciAobGV0IGkgPSAwLCBsID0gc3Vic2NyaXB0aW9ucy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgY29uc3Qgc3Vic2NyaXB0aW9uID0gc3Vic2NyaXB0aW9uc1tpXTtcblxuICAgICAgICAvLyBUaGUgc3Vic2NyaXB0aW9uIG1heSBoYXZlIGJlZW4gcmVtb3ZlZCBkdXJpbmcgdGhpcyBldmVudCBsb29wLlxuICAgICAgICAvLyBpdHMgbGlzdGVuZXIgbWF0Y2hlcyB0aGUgbGlzdGVuZXIgaW4gbWV0aG9kIHBhcmFtZXRlcnNcbiAgICAgICAgaWYgKHN1YnNjcmlwdGlvbiAmJiBzdWJzY3JpcHRpb24ubGlzdGVuZXIgPT09IGxpc3RlbmVyKSB7XG4gICAgICAgICAgc3Vic2NyaXB0aW9uLnJlbW92ZSgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gRXZlbnRFbWl0dGVyO1xuIl19