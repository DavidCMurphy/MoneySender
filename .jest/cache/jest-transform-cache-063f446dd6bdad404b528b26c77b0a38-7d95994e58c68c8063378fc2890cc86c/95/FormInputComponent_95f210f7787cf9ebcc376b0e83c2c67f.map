{"file":"/Users/davidmurphy/Desktop/MoneySender/src/Send/FormInputComponent.tsx","mappings":";;;;;;;;;;;;AAAA,+CAAyC;AACzC,sEAA8C;AAC9C,6CAA0C;AAE1C,MAAM,SAAS,GAAG,gBAAM,CAAC,IAAI,CAAA;;;WAGlB,eAAM,CAAC,KAAK;CACtB,CAAC;AAEF,MAAM,UAAU,GAAG,gBAAM,CAAC,IAAI,CAAA;;;WAGnB,eAAM,CAAC,GAAG;;CAEpB,CAAC;AAEF,MAAM,eAAe,GAAG,gBAAM,CAAC,IAAI,CAAA;;WAExB,eAAM,CAAC,KAAK;CACtB,CAAC;AAEF,MAAM,aAAa,GAAG,gBAAM,CAAC,SAAS,CAA0C;;;;WAIrE,eAAM,CAAC,KAAK;CACtB,CAAC;AAEF,MAAM,kBAAkB,GAAG,gBAAM,CAAC,IAAI,CAAA;;;CAGrC,CAAC;AAEF,MAAM,cAAc,GAAG,CAAC,KAA+C,EAAE,EAAE;IACzE,IAAI,KAAK,CAAC,SAAS,IAAI,IAAI,EAAE;QAC3B,OAAO,eAAM,CAAC,IAAI,CAAC;KACpB;IACD,IAAI,KAAK,CAAC,OAAO,IAAI,KAAK,EAAE;QAC1B,OAAO,eAAM,CAAC,GAAG,CAAC;KACnB;IACD,OAAO,eAAM,CAAC,SAAS,CAAC;AAC1B,CAAC,CAAA;AAED,MAAM,sBAAsB,GAAG,gBAAM,CAAC,IAAI,CAGxC;;;;kBAIiB,cAAe;CACjC,CAAC;AAqBF,MAAqB,kBAAmB,SAAQ,iBAG/C;IAHD;;QAIE,UAAK,GAAG;YACN,SAAS,EAAE,KAAK;SACjB,CAAC;IAqCJ,CAAC;IAnCC,MAAM;QACJ,MAAM,EAAE,UAAU,EAAE,KAAK,EAAE,OAAO,EAAE,MAAM,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC;QAC/D,OAAO,CACL,8BAAC,kBAAkB;YACjB,8BAAC,SAAS,QAAE,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,CAAa;YAC9C,8BAAC,sBAAsB,IACrB,OAAO,EAAE,OAAO,EAChB,SAAS,EAAE,IAAI,CAAC,KAAK,CAAC,SAAS;gBAE/B,8BAAC,eAAe,QAAE,MAAM,CAAmB;gBAC3C,8BAAC,aAAa,IACZ,KAAK,EAAE,KAAK,EACZ,OAAO,EAAE,GAAG,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC,EACjD,MAAM,EAAE,GAAG,EAAE;wBACX,IAAI,CAAC,QAAQ,CAAC,EAAE,SAAS,EAAE,KAAK,EAAE,CAAC,CAAC;wBACpC,IAAI,CAAC,KAAK,CAAC,QAAQ,mBACd,IAAI,CAAC,KAAK,CAAC,IAAI,IAClB,OAAO,EAAE,UAAU,CAAC,KAAK,CAAC,IAC1B,CAAC;oBACL,CAAC,EACD,YAAY,EAAE,IAAI,CAAC,EAAE;wBACnB,IAAI,CAAC,KAAK,CAAC,QAAQ,mBACd,IAAI,CAAC,KAAK,CAAC,IAAI,IAClB,KAAK,EAAE,IAAI,EACX,OAAO,EAAE,UAAU,CAAC,IAAI,CAAC,IACzB,CAAC;oBACL,CAAC,GACD,CACqB;YACxB,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,OAAO,KAAK,KAAK,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,SAAS,IAAI,CAC7D,8BAAC,UAAU,QAAE,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,WAAW,CAAc,CACvD,CACkB,CACtB,CAAC;IACJ,CAAC;CACF;AA3CD,qCA2CC","names":[],"sources":["/Users/davidmurphy/Desktop/MoneySender/src/Send/FormInputComponent.tsx"],"sourcesContent":["import React, { Component } from \"react\";\nimport styled from \"styled-components/native\";\nimport { colors } from \"../Themes/colors\";\n\nconst FormTitle = styled.Text`\n  font-size: 15px;\n  font-family: System;\n  color: ${colors.title};\n`;\n\nconst ErrorTitle = styled.Text`\n  font-size: 15px;\n  font-family: System;\n  color: ${colors.red};\n  margin-top: 10px;\n`;\n\nconst FormInputPrefix = styled.Text`\n  font-size: 20px;\n  color: ${colors.title};\n`;\n\nconst FormTextInput = styled.TextInput<{ modifying: boolean; isValid: boolean }>`\n  height: 42px;\n  width: 100%;\n  font-size: 20px;\n  color: ${colors.title};\n`;\n\nconst FormInputContainer = styled.View`\n  width: 100%;\n  margin-top: 36px;\n`;\n\nconst underLineColor = (props: { modifying: boolean, isValid: Boolean }) => {\n  if (props.modifying == true) {\n    return colors.blue;\n  }\n  if (props.isValid == false) {\n    return colors.red;\n  }\n  return colors.lightGrey;\n}\n\nconst FormTextInputContainer = styled.View<{\n  modifying: boolean;\n  isValid: boolean;\n}>`\n  flex-direction: row;\n  align-items: center;\n  border-bottom-width: 1px;\n  border-color: ${ underLineColor };\n`;\n\nexport interface FormInput {\n  title: string;\n  key: string;\n  isValid?: boolean;\n  value?: string;\n  prefix?: string;\n  errorString: string;\n  validation: (value?: string) => boolean;\n}\n\ninterface FormProps {\n  form: FormInput;\n  onChange: (value: FormInput) => void;\n}\n\ninterface FormInputState {\n  isFocused: boolean;\n}\n\nexport default class FormInputComponent extends Component<\n  FormProps,\n  FormInputState\n> {\n  state = {\n    isFocused: false\n  };\n\n  render() {\n    const { validation, value, isValid, prefix } = this.props.form;\n    return (\n      <FormInputContainer>\n        <FormTitle>{this.props.form.title}</FormTitle>\n        <FormTextInputContainer\n          isValid={isValid}\n          modifying={this.state.isFocused}\n        >\n          <FormInputPrefix>{prefix}</FormInputPrefix>\n          <FormTextInput\n            value={value}\n            onFocus={() => this.setState({ isFocused: true })}\n            onBlur={() => {\n              this.setState({ isFocused: false });\n              this.props.onChange({\n                ...this.props.form,\n                isValid: validation(value)\n              });\n            }}\n            onChangeText={text => {\n              this.props.onChange({\n                ...this.props.form,\n                value: text,\n                isValid: validation(text)\n              });\n            }}\n          />\n        </FormTextInputContainer>\n        {this.props.form.isValid === false && !this.state.isFocused && (\n          <ErrorTitle>{this.props.form.errorString}</ErrorTitle>\n        )}\n      </FormInputContainer>\n    );\n  }\n}\n"],"version":3}