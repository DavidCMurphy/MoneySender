5daf1a9df50d92fc2c7e95c83dbfdee6
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread"));

var DeprecatedImageStylePropTypes = require('DeprecatedImageStylePropTypes');

var TextStylePropTypes = require('TextStylePropTypes');

var DeprecatedViewStylePropTypes = require('DeprecatedViewStylePropTypes');

var processColor = require('processColor');

var processTransform = require('processTransform');

var sizesDiffer = require('sizesDiffer');

var ReactNativeStyleAttributes = {};

var _arr = Object.keys((0, _objectSpread2.default)({}, DeprecatedViewStylePropTypes, TextStylePropTypes, DeprecatedImageStylePropTypes));

for (var _i = 0; _i < _arr.length; _i++) {
  var attributeName = _arr[_i];
  ReactNativeStyleAttributes[attributeName] = true;
}

ReactNativeStyleAttributes.transform = {
  process: processTransform
};
ReactNativeStyleAttributes.shadowOffset = {
  diff: sizesDiffer
};
var colorAttributes = {
  process: processColor
};
ReactNativeStyleAttributes.backgroundColor = colorAttributes;
ReactNativeStyleAttributes.borderBottomColor = colorAttributes;
ReactNativeStyleAttributes.borderColor = colorAttributes;
ReactNativeStyleAttributes.borderLeftColor = colorAttributes;
ReactNativeStyleAttributes.borderRightColor = colorAttributes;
ReactNativeStyleAttributes.borderTopColor = colorAttributes;
ReactNativeStyleAttributes.borderStartColor = colorAttributes;
ReactNativeStyleAttributes.borderEndColor = colorAttributes;
ReactNativeStyleAttributes.color = colorAttributes;
ReactNativeStyleAttributes.shadowColor = colorAttributes;
ReactNativeStyleAttributes.textDecorationColor = colorAttributes;
ReactNativeStyleAttributes.tintColor = colorAttributes;
ReactNativeStyleAttributes.textShadowColor = colorAttributes;
ReactNativeStyleAttributes.overlayColor = colorAttributes;
module.exports = ReactNativeStyleAttributes;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlJlYWN0TmF0aXZlU3R5bGVBdHRyaWJ1dGVzLmpzIl0sIm5hbWVzIjpbIkRlcHJlY2F0ZWRJbWFnZVN0eWxlUHJvcFR5cGVzIiwicmVxdWlyZSIsIlRleHRTdHlsZVByb3BUeXBlcyIsIkRlcHJlY2F0ZWRWaWV3U3R5bGVQcm9wVHlwZXMiLCJwcm9jZXNzQ29sb3IiLCJwcm9jZXNzVHJhbnNmb3JtIiwic2l6ZXNEaWZmZXIiLCJSZWFjdE5hdGl2ZVN0eWxlQXR0cmlidXRlcyIsIk9iamVjdCIsImtleXMiLCJhdHRyaWJ1dGVOYW1lIiwidHJhbnNmb3JtIiwicHJvY2VzcyIsInNoYWRvd09mZnNldCIsImRpZmYiLCJjb2xvckF0dHJpYnV0ZXMiLCJiYWNrZ3JvdW5kQ29sb3IiLCJib3JkZXJCb3R0b21Db2xvciIsImJvcmRlckNvbG9yIiwiYm9yZGVyTGVmdENvbG9yIiwiYm9yZGVyUmlnaHRDb2xvciIsImJvcmRlclRvcENvbG9yIiwiYm9yZGVyU3RhcnRDb2xvciIsImJvcmRlckVuZENvbG9yIiwiY29sb3IiLCJzaGFkb3dDb2xvciIsInRleHREZWNvcmF0aW9uQ29sb3IiLCJ0aW50Q29sb3IiLCJ0ZXh0U2hhZG93Q29sb3IiLCJvdmVybGF5Q29sb3IiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFVQTs7Ozs7O0FBRUEsSUFBTUEsNkJBQTZCLEdBQUdDLE9BQU8sQ0FBQywrQkFBRCxDQUE3Qzs7QUFDQSxJQUFNQyxrQkFBa0IsR0FBR0QsT0FBTyxDQUFDLG9CQUFELENBQWxDOztBQUNBLElBQU1FLDRCQUE0QixHQUFHRixPQUFPLENBQUMsOEJBQUQsQ0FBNUM7O0FBRUEsSUFBTUcsWUFBWSxHQUFHSCxPQUFPLENBQUMsY0FBRCxDQUE1Qjs7QUFDQSxJQUFNSSxnQkFBZ0IsR0FBR0osT0FBTyxDQUFDLGtCQUFELENBQWhDOztBQUNBLElBQU1LLFdBQVcsR0FBR0wsT0FBTyxDQUFDLGFBQUQsQ0FBM0I7O0FBRUEsSUFBTU0sMEJBQTBCLEdBQUcsRUFBbkM7O1dBRTRCQyxNQUFNLENBQUNDLElBQVAsaUNBQ3ZCTiw0QkFEdUIsRUFFdkJELGtCQUZ1QixFQUd2QkYsNkJBSHVCLEU7O0FBQTVCLHlDQUlJO0FBSkMsTUFBTVUsYUFBYSxXQUFuQjtBQUtISCxFQUFBQSwwQkFBMEIsQ0FBQ0csYUFBRCxDQUExQixHQUE0QyxJQUE1QztBQUNEOztBQUVESCwwQkFBMEIsQ0FBQ0ksU0FBM0IsR0FBdUM7QUFBQ0MsRUFBQUEsT0FBTyxFQUFFUDtBQUFWLENBQXZDO0FBQ0FFLDBCQUEwQixDQUFDTSxZQUEzQixHQUEwQztBQUFDQyxFQUFBQSxJQUFJLEVBQUVSO0FBQVAsQ0FBMUM7QUFFQSxJQUFNUyxlQUFlLEdBQUc7QUFBQ0gsRUFBQUEsT0FBTyxFQUFFUjtBQUFWLENBQXhCO0FBQ0FHLDBCQUEwQixDQUFDUyxlQUEzQixHQUE2Q0QsZUFBN0M7QUFDQVIsMEJBQTBCLENBQUNVLGlCQUEzQixHQUErQ0YsZUFBL0M7QUFDQVIsMEJBQTBCLENBQUNXLFdBQTNCLEdBQXlDSCxlQUF6QztBQUNBUiwwQkFBMEIsQ0FBQ1ksZUFBM0IsR0FBNkNKLGVBQTdDO0FBQ0FSLDBCQUEwQixDQUFDYSxnQkFBM0IsR0FBOENMLGVBQTlDO0FBQ0FSLDBCQUEwQixDQUFDYyxjQUEzQixHQUE0Q04sZUFBNUM7QUFDQVIsMEJBQTBCLENBQUNlLGdCQUEzQixHQUE4Q1AsZUFBOUM7QUFDQVIsMEJBQTBCLENBQUNnQixjQUEzQixHQUE0Q1IsZUFBNUM7QUFDQVIsMEJBQTBCLENBQUNpQixLQUEzQixHQUFtQ1QsZUFBbkM7QUFDQVIsMEJBQTBCLENBQUNrQixXQUEzQixHQUF5Q1YsZUFBekM7QUFDQVIsMEJBQTBCLENBQUNtQixtQkFBM0IsR0FBaURYLGVBQWpEO0FBQ0FSLDBCQUEwQixDQUFDb0IsU0FBM0IsR0FBdUNaLGVBQXZDO0FBQ0FSLDBCQUEwQixDQUFDcUIsZUFBM0IsR0FBNkNiLGVBQTdDO0FBQ0FSLDBCQUEwQixDQUFDc0IsWUFBM0IsR0FBMENkLGVBQTFDO0FBRUFlLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQnhCLDBCQUFqQiIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGZvcm1hdCBzdHJpY3QtbG9jYWxcbiAqIEBmbG93XG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBEZXByZWNhdGVkSW1hZ2VTdHlsZVByb3BUeXBlcyA9IHJlcXVpcmUoJ0RlcHJlY2F0ZWRJbWFnZVN0eWxlUHJvcFR5cGVzJyk7XG5jb25zdCBUZXh0U3R5bGVQcm9wVHlwZXMgPSByZXF1aXJlKCdUZXh0U3R5bGVQcm9wVHlwZXMnKTtcbmNvbnN0IERlcHJlY2F0ZWRWaWV3U3R5bGVQcm9wVHlwZXMgPSByZXF1aXJlKCdEZXByZWNhdGVkVmlld1N0eWxlUHJvcFR5cGVzJyk7XG5cbmNvbnN0IHByb2Nlc3NDb2xvciA9IHJlcXVpcmUoJ3Byb2Nlc3NDb2xvcicpO1xuY29uc3QgcHJvY2Vzc1RyYW5zZm9ybSA9IHJlcXVpcmUoJ3Byb2Nlc3NUcmFuc2Zvcm0nKTtcbmNvbnN0IHNpemVzRGlmZmVyID0gcmVxdWlyZSgnc2l6ZXNEaWZmZXInKTtcblxuY29uc3QgUmVhY3ROYXRpdmVTdHlsZUF0dHJpYnV0ZXMgPSB7fTtcblxuZm9yIChjb25zdCBhdHRyaWJ1dGVOYW1lIG9mIE9iamVjdC5rZXlzKHtcbiAgLi4uRGVwcmVjYXRlZFZpZXdTdHlsZVByb3BUeXBlcyxcbiAgLi4uVGV4dFN0eWxlUHJvcFR5cGVzLFxuICAuLi5EZXByZWNhdGVkSW1hZ2VTdHlsZVByb3BUeXBlcyxcbn0pKSB7XG4gIFJlYWN0TmF0aXZlU3R5bGVBdHRyaWJ1dGVzW2F0dHJpYnV0ZU5hbWVdID0gdHJ1ZTtcbn1cblxuUmVhY3ROYXRpdmVTdHlsZUF0dHJpYnV0ZXMudHJhbnNmb3JtID0ge3Byb2Nlc3M6IHByb2Nlc3NUcmFuc2Zvcm19O1xuUmVhY3ROYXRpdmVTdHlsZUF0dHJpYnV0ZXMuc2hhZG93T2Zmc2V0ID0ge2RpZmY6IHNpemVzRGlmZmVyfTtcblxuY29uc3QgY29sb3JBdHRyaWJ1dGVzID0ge3Byb2Nlc3M6IHByb2Nlc3NDb2xvcn07XG5SZWFjdE5hdGl2ZVN0eWxlQXR0cmlidXRlcy5iYWNrZ3JvdW5kQ29sb3IgPSBjb2xvckF0dHJpYnV0ZXM7XG5SZWFjdE5hdGl2ZVN0eWxlQXR0cmlidXRlcy5ib3JkZXJCb3R0b21Db2xvciA9IGNvbG9yQXR0cmlidXRlcztcblJlYWN0TmF0aXZlU3R5bGVBdHRyaWJ1dGVzLmJvcmRlckNvbG9yID0gY29sb3JBdHRyaWJ1dGVzO1xuUmVhY3ROYXRpdmVTdHlsZUF0dHJpYnV0ZXMuYm9yZGVyTGVmdENvbG9yID0gY29sb3JBdHRyaWJ1dGVzO1xuUmVhY3ROYXRpdmVTdHlsZUF0dHJpYnV0ZXMuYm9yZGVyUmlnaHRDb2xvciA9IGNvbG9yQXR0cmlidXRlcztcblJlYWN0TmF0aXZlU3R5bGVBdHRyaWJ1dGVzLmJvcmRlclRvcENvbG9yID0gY29sb3JBdHRyaWJ1dGVzO1xuUmVhY3ROYXRpdmVTdHlsZUF0dHJpYnV0ZXMuYm9yZGVyU3RhcnRDb2xvciA9IGNvbG9yQXR0cmlidXRlcztcblJlYWN0TmF0aXZlU3R5bGVBdHRyaWJ1dGVzLmJvcmRlckVuZENvbG9yID0gY29sb3JBdHRyaWJ1dGVzO1xuUmVhY3ROYXRpdmVTdHlsZUF0dHJpYnV0ZXMuY29sb3IgPSBjb2xvckF0dHJpYnV0ZXM7XG5SZWFjdE5hdGl2ZVN0eWxlQXR0cmlidXRlcy5zaGFkb3dDb2xvciA9IGNvbG9yQXR0cmlidXRlcztcblJlYWN0TmF0aXZlU3R5bGVBdHRyaWJ1dGVzLnRleHREZWNvcmF0aW9uQ29sb3IgPSBjb2xvckF0dHJpYnV0ZXM7XG5SZWFjdE5hdGl2ZVN0eWxlQXR0cmlidXRlcy50aW50Q29sb3IgPSBjb2xvckF0dHJpYnV0ZXM7XG5SZWFjdE5hdGl2ZVN0eWxlQXR0cmlidXRlcy50ZXh0U2hhZG93Q29sb3IgPSBjb2xvckF0dHJpYnV0ZXM7XG5SZWFjdE5hdGl2ZVN0eWxlQXR0cmlidXRlcy5vdmVybGF5Q29sb3IgPSBjb2xvckF0dHJpYnV0ZXM7XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3ROYXRpdmVTdHlsZUF0dHJpYnV0ZXM7XG4iXX0=