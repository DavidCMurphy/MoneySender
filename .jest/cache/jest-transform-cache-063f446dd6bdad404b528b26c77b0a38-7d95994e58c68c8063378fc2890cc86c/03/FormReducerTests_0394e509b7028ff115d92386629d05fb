6a7edd4e036c8c2f22603bd86a8f3121
"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
require("react-native");
const Reducers_1 = __importStar(require("../Account/Reducers"));
const Reducers_2 = __importStar(require("../Send/Reducers"));
const ActionTypes_1 = require("../ActionTypes");
const transaction = { name: "David", email: "David.conor.m@gmail.com", amount: "100" };
describe('Account reducer should function correctly', () => {
    it('should add a transaction to our list', () => {
        const account = Reducers_1.default(Reducers_1.defaultAccountState(), { type: ActionTypes_1.TypeKeys.SEND_MONEY_SUCCESS, transaction });
        expect(account.transations).toEqual([transaction]);
    });
    it('should add ammount to our send total', () => {
        const state = Reducers_1.defaultAccountState();
        const account = Reducers_1.default(state, { type: ActionTypes_1.TypeKeys.SEND_MONEY_SUCCESS, transaction });
        expect(account.totalSent).toEqual(state.totalSent + (+transaction.amount));
    });
    it('should remove ammount from out total', () => {
        const state = Reducers_1.defaultAccountState();
        const account = Reducers_1.default(state, { type: ActionTypes_1.TypeKeys.SEND_MONEY_SUCCESS, transaction });
        expect(account.totalSent).toEqual(state.totalAvailable - (+transaction.amount));
    });
});
describe('ASend reducer should function correctly', () => {
    it('should stop loading on success', () => {
        const send = Reducers_2.default(Reducers_2.defaultSendState(), { type: ActionTypes_1.TypeKeys.SEND_MONEY_SUCCESS, transaction });
        expect(send.loading).toEqual(false);
    });
    it('should start loading on send', () => {
        const send = Reducers_2.default(Reducers_2.defaultSendState(), { type: ActionTypes_1.TypeKeys.SEND_MONEY, transaction });
        expect(send.loading).toEqual(true);
    });
    it('should stop loading on fail', () => {
        const send = Reducers_2.default(Reducers_2.defaultSendState(), { type: ActionTypes_1.TypeKeys.SEND_MONEY_FAIL });
        expect(send.loading).toEqual(false);
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2RhdmlkbXVycGh5L0Rlc2t0b3AvTW9uZXlTZW5kZXIvc3JjL19fdGVzdHNfXy9Gb3JtUmVkdWNlclRlc3RzLnRzeCIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBQSx3QkFBcUI7QUFDckIsZ0VBQTBFO0FBQzFFLDZEQUFnRTtBQUNoRSxnREFBeUM7QUFFekMsTUFBTSxXQUFXLEdBQUcsRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFFLEtBQUssRUFBRSx5QkFBeUIsRUFBRSxNQUFNLEVBQUUsS0FBSyxFQUFFLENBQUE7QUFFdEYsUUFBUSxDQUFDLDJDQUEyQyxFQUFFLEdBQUcsRUFBRTtJQUV6RCxFQUFFLENBQUMsc0NBQXNDLEVBQUUsR0FBRyxFQUFFO1FBQzVDLE1BQU0sT0FBTyxHQUFHLGtCQUFjLENBQUUsOEJBQW1CLEVBQUUsRUFBRSxFQUFFLElBQUksRUFBRSxzQkFBUSxDQUFDLGtCQUFrQixFQUFFLFdBQVcsRUFBRSxDQUFFLENBQUE7UUFDM0csTUFBTSxDQUFFLE9BQU8sQ0FBQyxXQUFXLENBQUUsQ0FBQyxPQUFPLENBQUUsQ0FBQyxXQUFXLENBQUMsQ0FBRSxDQUFBO0lBQzFELENBQUMsQ0FBQyxDQUFBO0lBRUYsRUFBRSxDQUFDLHNDQUFzQyxFQUFFLEdBQUcsRUFBRTtRQUM5QyxNQUFNLEtBQUssR0FBRyw4QkFBbUIsRUFBRSxDQUFBO1FBQ25DLE1BQU0sT0FBTyxHQUFHLGtCQUFjLENBQUUsS0FBSyxFQUFFLEVBQUUsSUFBSSxFQUFFLHNCQUFRLENBQUMsa0JBQWtCLEVBQUUsV0FBVyxFQUFFLENBQUUsQ0FBQTtRQUMzRixNQUFNLENBQUUsT0FBTyxDQUFDLFNBQVMsQ0FBRSxDQUFDLE9BQU8sQ0FBRSxLQUFLLENBQUMsU0FBUyxHQUFHLENBQUMsQ0FBQyxXQUFXLENBQUMsTUFBTSxDQUFDLENBQUUsQ0FBQTtJQUNoRixDQUFDLENBQUMsQ0FBQTtJQUVGLEVBQUUsQ0FBQyxzQ0FBc0MsRUFBRSxHQUFHLEVBQUU7UUFDOUMsTUFBTSxLQUFLLEdBQUcsOEJBQW1CLEVBQUUsQ0FBQTtRQUNuQyxNQUFNLE9BQU8sR0FBRyxrQkFBYyxDQUFFLEtBQUssRUFBRSxFQUFFLElBQUksRUFBRSxzQkFBUSxDQUFDLGtCQUFrQixFQUFFLFdBQVcsRUFBRSxDQUFFLENBQUE7UUFDM0YsTUFBTSxDQUFFLE9BQU8sQ0FBQyxTQUFTLENBQUUsQ0FBQyxPQUFPLENBQUUsS0FBSyxDQUFDLGNBQWMsR0FBRyxDQUFDLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxDQUFFLENBQUE7SUFDckYsQ0FBQyxDQUFDLENBQUE7QUFDSixDQUFDLENBQUMsQ0FBQTtBQUVGLFFBQVEsQ0FBQyx5Q0FBeUMsRUFBRSxHQUFHLEVBQUU7SUFFdkQsRUFBRSxDQUFDLGdDQUFnQyxFQUFFLEdBQUcsRUFBRTtRQUN0QyxNQUFNLElBQUksR0FBRyxrQkFBVyxDQUFFLDJCQUFnQixFQUFFLEVBQUUsRUFBRSxJQUFJLEVBQUUsc0JBQVEsQ0FBQyxrQkFBa0IsRUFBRSxXQUFXLEVBQUUsQ0FBRSxDQUFBO1FBQ2xHLE1BQU0sQ0FBRSxJQUFJLENBQUMsT0FBTyxDQUFFLENBQUMsT0FBTyxDQUFFLEtBQUssQ0FBRSxDQUFBO0lBQzNDLENBQUMsQ0FBQyxDQUFBO0lBRUYsRUFBRSxDQUFDLDhCQUE4QixFQUFFLEdBQUcsRUFBRTtRQUN0QyxNQUFNLElBQUksR0FBRyxrQkFBVyxDQUFFLDJCQUFnQixFQUFFLEVBQUUsRUFBRSxJQUFJLEVBQUUsc0JBQVEsQ0FBQyxVQUFVLEVBQUUsV0FBVyxFQUFFLENBQUUsQ0FBQTtRQUMxRixNQUFNLENBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBRSxDQUFDLE9BQU8sQ0FBRSxJQUFJLENBQUUsQ0FBQTtJQUN6QyxDQUFDLENBQUMsQ0FBQTtJQUVILEVBQUUsQ0FBQyw2QkFBNkIsRUFBRSxHQUFHLEVBQUU7UUFDbkMsTUFBTSxJQUFJLEdBQUcsa0JBQVcsQ0FBRSwyQkFBZ0IsRUFBRSxFQUFFLEVBQUUsSUFBSSxFQUFFLHNCQUFRLENBQUMsZUFBZSxFQUFFLENBQUUsQ0FBQTtRQUNsRixNQUFNLENBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBRSxDQUFDLE9BQU8sQ0FBRSxLQUFLLENBQUUsQ0FBQTtJQUMzQyxDQUFDLENBQUMsQ0FBQTtBQUNGLENBQUMsQ0FBQyxDQUFBIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIi9Vc2Vycy9kYXZpZG11cnBoeS9EZXNrdG9wL01vbmV5U2VuZGVyL3NyYy9fX3Rlc3RzX18vRm9ybVJlZHVjZXJUZXN0cy50c3giXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICdyZWFjdC1uYXRpdmUnXG5pbXBvcnQgIEFjY291bnRSZWR1Y2VyLCB7IGRlZmF1bHRBY2NvdW50U3RhdGUgfSBmcm9tICcuLi9BY2NvdW50L1JlZHVjZXJzJ1xuaW1wb3J0IFNlbmRSZWR1Y2VyLCB7IGRlZmF1bHRTZW5kU3RhdGUgfSBmcm9tICcuLi9TZW5kL1JlZHVjZXJzJ1xuaW1wb3J0IHsgVHlwZUtleXMgfSBmcm9tICcuLi9BY3Rpb25UeXBlcydcblxuY29uc3QgdHJhbnNhY3Rpb24gPSB7IG5hbWU6IFwiRGF2aWRcIiwgZW1haWw6IFwiRGF2aWQuY29ub3IubUBnbWFpbC5jb21cIiwgYW1vdW50OiBcIjEwMFwiIH1cblxuZGVzY3JpYmUoJ0FjY291bnQgcmVkdWNlciBzaG91bGQgZnVuY3Rpb24gY29ycmVjdGx5JywgKCkgPT4ge1xuXG4gIGl0KCdzaG91bGQgYWRkIGEgdHJhbnNhY3Rpb24gdG8gb3VyIGxpc3QnLCAoKSA9PiB7XG4gICAgICBjb25zdCBhY2NvdW50ID0gQWNjb3VudFJlZHVjZXIoIGRlZmF1bHRBY2NvdW50U3RhdGUoKSwgeyB0eXBlOiBUeXBlS2V5cy5TRU5EX01PTkVZX1NVQ0NFU1MsIHRyYW5zYWN0aW9uIH0gKVxuICAgICAgZXhwZWN0KCBhY2NvdW50LnRyYW5zYXRpb25zICkudG9FcXVhbCggW3RyYW5zYWN0aW9uXSApXG4gIH0pXG5cbiAgaXQoJ3Nob3VsZCBhZGQgYW1tb3VudCB0byBvdXIgc2VuZCB0b3RhbCcsICgpID0+IHtcbiAgICBjb25zdCBzdGF0ZSA9IGRlZmF1bHRBY2NvdW50U3RhdGUoKVxuICAgIGNvbnN0IGFjY291bnQgPSBBY2NvdW50UmVkdWNlciggc3RhdGUsIHsgdHlwZTogVHlwZUtleXMuU0VORF9NT05FWV9TVUNDRVNTLCB0cmFuc2FjdGlvbiB9IClcbiAgICBleHBlY3QoIGFjY291bnQudG90YWxTZW50ICkudG9FcXVhbCggc3RhdGUudG90YWxTZW50ICsgKCt0cmFuc2FjdGlvbi5hbW91bnQpIClcbiAgfSlcblxuICBpdCgnc2hvdWxkIHJlbW92ZSBhbW1vdW50IGZyb20gb3V0IHRvdGFsJywgKCkgPT4ge1xuICAgIGNvbnN0IHN0YXRlID0gZGVmYXVsdEFjY291bnRTdGF0ZSgpXG4gICAgY29uc3QgYWNjb3VudCA9IEFjY291bnRSZWR1Y2VyKCBzdGF0ZSwgeyB0eXBlOiBUeXBlS2V5cy5TRU5EX01PTkVZX1NVQ0NFU1MsIHRyYW5zYWN0aW9uIH0gKVxuICAgIGV4cGVjdCggYWNjb3VudC50b3RhbFNlbnQgKS50b0VxdWFsKCBzdGF0ZS50b3RhbEF2YWlsYWJsZSAtICgrdHJhbnNhY3Rpb24uYW1vdW50KSApXG4gIH0pXG59KVxuXG5kZXNjcmliZSgnQVNlbmQgcmVkdWNlciBzaG91bGQgZnVuY3Rpb24gY29ycmVjdGx5JywgKCkgPT4ge1xuXG4gIGl0KCdzaG91bGQgc3RvcCBsb2FkaW5nIG9uIHN1Y2Nlc3MnLCAoKSA9PiB7XG4gICAgICBjb25zdCBzZW5kID0gU2VuZFJlZHVjZXIoIGRlZmF1bHRTZW5kU3RhdGUoKSwgeyB0eXBlOiBUeXBlS2V5cy5TRU5EX01PTkVZX1NVQ0NFU1MsIHRyYW5zYWN0aW9uIH0gKVxuICAgICAgZXhwZWN0KCBzZW5kLmxvYWRpbmcgKS50b0VxdWFsKCBmYWxzZSApXG4gIH0pXG5cbiAgaXQoJ3Nob3VsZCBzdGFydCBsb2FkaW5nIG9uIHNlbmQnLCAoKSA9PiB7XG4gICAgY29uc3Qgc2VuZCA9IFNlbmRSZWR1Y2VyKCBkZWZhdWx0U2VuZFN0YXRlKCksIHsgdHlwZTogVHlwZUtleXMuU0VORF9NT05FWSwgdHJhbnNhY3Rpb24gfSApXG4gICAgZXhwZWN0KCBzZW5kLmxvYWRpbmcgKS50b0VxdWFsKCB0cnVlIClcbiB9KVxuXG5pdCgnc2hvdWxkIHN0b3AgbG9hZGluZyBvbiBmYWlsJywgKCkgPT4ge1xuICAgIGNvbnN0IHNlbmQgPSBTZW5kUmVkdWNlciggZGVmYXVsdFNlbmRTdGF0ZSgpLCB7IHR5cGU6IFR5cGVLZXlzLlNFTkRfTU9ORVlfRkFJTCB9IClcbiAgICBleHBlY3QoIHNlbmQubG9hZGluZyApLnRvRXF1YWwoIGZhbHNlIClcbn0pXG59KVxuXG4iXSwidmVyc2lvbiI6M30=