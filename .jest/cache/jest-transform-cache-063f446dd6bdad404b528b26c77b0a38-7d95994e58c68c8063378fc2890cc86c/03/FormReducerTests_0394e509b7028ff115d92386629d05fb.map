{"file":"/Users/davidmurphy/Desktop/MoneySender/src/__tests__/FormReducerTests.tsx","mappings":";;;;;;;;;AAAA,wBAAqB;AACrB,gEAA0E;AAC1E,6DAAgE;AAChE,gDAAyC;AAEzC,MAAM,WAAW,GAAG,EAAE,IAAI,EAAE,OAAO,EAAE,KAAK,EAAE,yBAAyB,EAAE,MAAM,EAAE,KAAK,EAAE,CAAA;AAEtF,QAAQ,CAAC,2CAA2C,EAAE,GAAG,EAAE;IAEzD,EAAE,CAAC,sCAAsC,EAAE,GAAG,EAAE;QAC5C,MAAM,OAAO,GAAG,kBAAc,CAAE,8BAAmB,EAAE,EAAE,EAAE,IAAI,EAAE,sBAAQ,CAAC,kBAAkB,EAAE,WAAW,EAAE,CAAE,CAAA;QAC3G,MAAM,CAAE,OAAO,CAAC,WAAW,CAAE,CAAC,OAAO,CAAE,CAAC,WAAW,CAAC,CAAE,CAAA;IAC1D,CAAC,CAAC,CAAA;IAEF,EAAE,CAAC,sCAAsC,EAAE,GAAG,EAAE;QAC9C,MAAM,KAAK,GAAG,8BAAmB,EAAE,CAAA;QACnC,MAAM,OAAO,GAAG,kBAAc,CAAE,KAAK,EAAE,EAAE,IAAI,EAAE,sBAAQ,CAAC,kBAAkB,EAAE,WAAW,EAAE,CAAE,CAAA;QAC3F,MAAM,CAAE,OAAO,CAAC,SAAS,CAAE,CAAC,OAAO,CAAE,KAAK,CAAC,SAAS,GAAG,CAAC,CAAC,WAAW,CAAC,MAAM,CAAC,CAAE,CAAA;IAChF,CAAC,CAAC,CAAA;IAEF,EAAE,CAAC,sCAAsC,EAAE,GAAG,EAAE;QAC9C,MAAM,KAAK,GAAG,8BAAmB,EAAE,CAAA;QACnC,MAAM,OAAO,GAAG,kBAAc,CAAE,KAAK,EAAE,EAAE,IAAI,EAAE,sBAAQ,CAAC,kBAAkB,EAAE,WAAW,EAAE,CAAE,CAAA;QAC3F,MAAM,CAAE,OAAO,CAAC,SAAS,CAAE,CAAC,OAAO,CAAE,KAAK,CAAC,cAAc,GAAG,CAAC,CAAC,WAAW,CAAC,MAAM,CAAC,CAAE,CAAA;IACrF,CAAC,CAAC,CAAA;AACJ,CAAC,CAAC,CAAA;AAEF,QAAQ,CAAC,yCAAyC,EAAE,GAAG,EAAE;IAEvD,EAAE,CAAC,gCAAgC,EAAE,GAAG,EAAE;QACtC,MAAM,IAAI,GAAG,kBAAW,CAAE,2BAAgB,EAAE,EAAE,EAAE,IAAI,EAAE,sBAAQ,CAAC,kBAAkB,EAAE,WAAW,EAAE,CAAE,CAAA;QAClG,MAAM,CAAE,IAAI,CAAC,OAAO,CAAE,CAAC,OAAO,CAAE,KAAK,CAAE,CAAA;IAC3C,CAAC,CAAC,CAAA;IAEF,EAAE,CAAC,8BAA8B,EAAE,GAAG,EAAE;QACtC,MAAM,IAAI,GAAG,kBAAW,CAAE,2BAAgB,EAAE,EAAE,EAAE,IAAI,EAAE,sBAAQ,CAAC,UAAU,EAAE,WAAW,EAAE,CAAE,CAAA;QAC1F,MAAM,CAAE,IAAI,CAAC,OAAO,CAAE,CAAC,OAAO,CAAE,IAAI,CAAE,CAAA;IACzC,CAAC,CAAC,CAAA;IAEH,EAAE,CAAC,6BAA6B,EAAE,GAAG,EAAE;QACnC,MAAM,IAAI,GAAG,kBAAW,CAAE,2BAAgB,EAAE,EAAE,EAAE,IAAI,EAAE,sBAAQ,CAAC,eAAe,EAAE,CAAE,CAAA;QAClF,MAAM,CAAE,IAAI,CAAC,OAAO,CAAE,CAAC,OAAO,CAAE,KAAK,CAAE,CAAA;IAC3C,CAAC,CAAC,CAAA;AACF,CAAC,CAAC,CAAA","names":[],"sources":["/Users/davidmurphy/Desktop/MoneySender/src/__tests__/FormReducerTests.tsx"],"sourcesContent":["import 'react-native'\nimport  AccountReducer, { defaultAccountState } from '../Account/Reducers'\nimport SendReducer, { defaultSendState } from '../Send/Reducers'\nimport { TypeKeys } from '../ActionTypes'\n\nconst transaction = { name: \"David\", email: \"David.conor.m@gmail.com\", amount: \"100\" }\n\ndescribe('Account reducer should function correctly', () => {\n\n  it('should add a transaction to our list', () => {\n      const account = AccountReducer( defaultAccountState(), { type: TypeKeys.SEND_MONEY_SUCCESS, transaction } )\n      expect( account.transations ).toEqual( [transaction] )\n  })\n\n  it('should add ammount to our send total', () => {\n    const state = defaultAccountState()\n    const account = AccountReducer( state, { type: TypeKeys.SEND_MONEY_SUCCESS, transaction } )\n    expect( account.totalSent ).toEqual( state.totalSent + (+transaction.amount) )\n  })\n\n  it('should remove ammount from out total', () => {\n    const state = defaultAccountState()\n    const account = AccountReducer( state, { type: TypeKeys.SEND_MONEY_SUCCESS, transaction } )\n    expect( account.totalSent ).toEqual( state.totalAvailable - (+transaction.amount) )\n  })\n})\n\ndescribe('ASend reducer should function correctly', () => {\n\n  it('should stop loading on success', () => {\n      const send = SendReducer( defaultSendState(), { type: TypeKeys.SEND_MONEY_SUCCESS, transaction } )\n      expect( send.loading ).toEqual( false )\n  })\n\n  it('should start loading on send', () => {\n    const send = SendReducer( defaultSendState(), { type: TypeKeys.SEND_MONEY, transaction } )\n    expect( send.loading ).toEqual( true )\n })\n\nit('should stop loading on fail', () => {\n    const send = SendReducer( defaultSendState(), { type: TypeKeys.SEND_MONEY_FAIL } )\n    expect( send.loading ).toEqual( false )\n})\n})\n\n"],"version":3}