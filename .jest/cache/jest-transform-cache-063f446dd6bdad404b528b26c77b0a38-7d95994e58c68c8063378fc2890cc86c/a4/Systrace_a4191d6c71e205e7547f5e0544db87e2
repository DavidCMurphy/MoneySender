ebc1b48375e61530b878685f32de1882
'use strict';

var invariant = require('fbjs/lib/invariant');

var TRACE_TAG_REACT_APPS = 1 << 17;
var TRACE_TAG_JS_VM_CALLS = 1 << 27;
var _enabled = false;
var _asyncCookie = 0;
var _markStack = [];

var _markStackIndex = -1;

var _canInstallReactHook = false;
var REACT_MARKER = "\u269B";
var userTimingPolyfill = __DEV__ ? {
  mark: function mark(markName) {
    if (_enabled) {
      _markStackIndex++;
      _markStack[_markStackIndex] = markName;
      var systraceLabel = markName;

      if (markName[0] === REACT_MARKER) {
        var indexOfId = markName.lastIndexOf(' (#');
        var cutoffIndex = indexOfId !== -1 ? indexOfId : markName.length;
        systraceLabel = markName.slice(2, cutoffIndex);
      }

      Systrace.beginEvent(systraceLabel);
    }
  },
  measure: function measure(measureName, startMark, endMark) {
    if (_enabled) {
      invariant(typeof measureName === 'string' && typeof startMark === 'string' && typeof endMark === 'undefined', 'Only performance.measure(string, string) overload is supported.');
      var topMark = _markStack[_markStackIndex];
      invariant(startMark === topMark, 'There was a mismatching performance.measure() call. ' + 'Expected "%s" but got "%s."', topMark, startMark);
      _markStackIndex--;
      Systrace.endEvent();
    }
  },
  clearMarks: function clearMarks(markName) {
    if (_enabled) {
      if (_markStackIndex === -1) {
        return;
      }

      if (markName === _markStack[_markStackIndex]) {
        if (userTimingPolyfill != null) {
          userTimingPolyfill.measure(markName, markName);
        }
      }
    }
  },
  clearMeasures: function clearMeasures() {}
} : null;
var Systrace = {
  installReactHook: function installReactHook() {
    if (_enabled) {
      if (__DEV__) {
        global.performance = userTimingPolyfill;
      }
    }

    _canInstallReactHook = true;
  },
  setEnabled: function setEnabled(enabled) {
    if (_enabled !== enabled) {
      if (__DEV__) {
        if (enabled) {
          global.nativeTraceBeginLegacy && global.nativeTraceBeginLegacy(TRACE_TAG_JS_VM_CALLS);
        } else {
          global.nativeTraceEndLegacy && global.nativeTraceEndLegacy(TRACE_TAG_JS_VM_CALLS);
        }

        if (_canInstallReactHook) {
          if (enabled && global.performance === undefined) {
            global.performance = userTimingPolyfill;
          }
        }
      }

      _enabled = enabled;
    }
  },
  isEnabled: function isEnabled() {
    return _enabled;
  },
  beginEvent: function beginEvent(profileName, args) {
    if (_enabled) {
      profileName = typeof profileName === 'function' ? profileName() : profileName;
      global.nativeTraceBeginSection(TRACE_TAG_REACT_APPS, profileName, args);
    }
  },
  endEvent: function endEvent() {
    if (_enabled) {
      global.nativeTraceEndSection(TRACE_TAG_REACT_APPS);
    }
  },
  beginAsyncEvent: function beginAsyncEvent(profileName) {
    var cookie = _asyncCookie;

    if (_enabled) {
      _asyncCookie++;
      profileName = typeof profileName === 'function' ? profileName() : profileName;
      global.nativeTraceBeginAsyncSection(TRACE_TAG_REACT_APPS, profileName, cookie);
    }

    return cookie;
  },
  endAsyncEvent: function endAsyncEvent(profileName, cookie) {
    if (_enabled) {
      profileName = typeof profileName === 'function' ? profileName() : profileName;
      global.nativeTraceEndAsyncSection(TRACE_TAG_REACT_APPS, profileName, cookie);
    }
  },
  counterEvent: function counterEvent(profileName, value) {
    if (_enabled) {
      profileName = typeof profileName === 'function' ? profileName() : profileName;
      global.nativeTraceCounter && global.nativeTraceCounter(TRACE_TAG_REACT_APPS, profileName, value);
    }
  }
};

if (__DEV__) {
  require.Systrace = Systrace;
}

module.exports = Systrace;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlN5c3RyYWNlLmpzIl0sIm5hbWVzIjpbImludmFyaWFudCIsInJlcXVpcmUiLCJUUkFDRV9UQUdfUkVBQ1RfQVBQUyIsIlRSQUNFX1RBR19KU19WTV9DQUxMUyIsIl9lbmFibGVkIiwiX2FzeW5jQ29va2llIiwiX21hcmtTdGFjayIsIl9tYXJrU3RhY2tJbmRleCIsIl9jYW5JbnN0YWxsUmVhY3RIb29rIiwiUkVBQ1RfTUFSS0VSIiwidXNlclRpbWluZ1BvbHlmaWxsIiwiX19ERVZfXyIsIm1hcmsiLCJtYXJrTmFtZSIsInN5c3RyYWNlTGFiZWwiLCJpbmRleE9mSWQiLCJsYXN0SW5kZXhPZiIsImN1dG9mZkluZGV4IiwibGVuZ3RoIiwic2xpY2UiLCJTeXN0cmFjZSIsImJlZ2luRXZlbnQiLCJtZWFzdXJlIiwibWVhc3VyZU5hbWUiLCJzdGFydE1hcmsiLCJlbmRNYXJrIiwidG9wTWFyayIsImVuZEV2ZW50IiwiY2xlYXJNYXJrcyIsImNsZWFyTWVhc3VyZXMiLCJpbnN0YWxsUmVhY3RIb29rIiwiZ2xvYmFsIiwicGVyZm9ybWFuY2UiLCJzZXRFbmFibGVkIiwiZW5hYmxlZCIsIm5hdGl2ZVRyYWNlQmVnaW5MZWdhY3kiLCJuYXRpdmVUcmFjZUVuZExlZ2FjeSIsInVuZGVmaW5lZCIsImlzRW5hYmxlZCIsInByb2ZpbGVOYW1lIiwiYXJncyIsIm5hdGl2ZVRyYWNlQmVnaW5TZWN0aW9uIiwibmF0aXZlVHJhY2VFbmRTZWN0aW9uIiwiYmVnaW5Bc3luY0V2ZW50IiwiY29va2llIiwibmF0aXZlVHJhY2VCZWdpbkFzeW5jU2VjdGlvbiIsImVuZEFzeW5jRXZlbnQiLCJuYXRpdmVUcmFjZUVuZEFzeW5jU2VjdGlvbiIsImNvdW50ZXJFdmVudCIsInZhbHVlIiwibmF0aXZlVHJhY2VDb3VudGVyIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBVUE7O0FBRUEsSUFBTUEsU0FBUyxHQUFHQyxPQUFPLENBQUMsb0JBQUQsQ0FBekI7O0FBRUEsSUFB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RUFBL0MsR0FBb0RBLFdBRHREO0FBRUFSLE1BQUFBLE1BQU0sQ0FBQ2MsNEJBQVAsQ0FDRTNDLG9CQURGLEVBRUVxQyxXQUZGLEVBR0VLLE1BSEY7QUFLRDs7QUFDRCxXQUFPQSxNQUFQO0FBQ0QsR0FyRWM7QUF1RWZFLEVBQUFBLGFBdkVlLHlCQXVFRFAsV0F2RUMsRUF1RWtCSyxNQXZFbEIsRUF1RWdDO0FBQzdDLFFBQUl4QyxRQUFKLEVBQWM7QUFDWm1DLE1BQUFBLFdBQVcsR0FDVCxPQUFPQSxXQUFQLEtBQXVCLFVBQXZCLEdBQW9DQSxXQUFXLEVBQS9DLEdBQW9EQSxXQUR0RDtBQUVBUixNQUFBQSxNQUFNLENBQUNnQiwwQkFBUCxDQUNFN0Msb0JBREYsRUFFRXFDLFdBRkYsRUFHRUssTUFIRjtBQUtEO0FBQ0YsR0FqRmM7QUFzRmZJLEVBQUFBLFlBdEZlLHdCQXNGRlQsV0F0RkUsRUFzRmlCVSxLQXRGakIsRUFzRjhCO0FBQzNDLFFBQUk3QyxRQUFKLEVBQWM7QUFDWm1DLE1BQUFBLFdBQVcsR0FDVCxPQUFPQSxXQUFQLEtBQXVCLFVBQXZCLEdBQW9DQSxXQUFXLEVBQS9DLEdBQW9EQSxXQUR0RDtBQUVBUixNQUFBQSxNQUFNLENBQUNtQixrQkFBUCxJQUNFbkIsTUFBTSxDQUFDbUIsa0JBQVAsQ0FBMEJoRCxvQkFBMUIsRUFBZ0RxQyxXQUFoRCxFQUE2RFUsS0FBN0QsQ0FERjtBQUVEO0FBQ0Y7QUE3RmMsQ0FBakI7O0FBZ0dBLElBQUl0QyxPQUFKLEVBQWE7QUFLVlYsRUFBQUEsT0FBRCxDQUFlbUIsUUFBZixHQUEwQkEsUUFBMUI7QUFDRDs7QUFFRCtCLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQmhDLFFBQWpCIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZmxvd1xuICogQGZvcm1hdFxuICovXG5cbid1c2Ugc3RyaWN0JztcblxuY29uc3QgaW52YXJpYW50ID0gcmVxdWlyZSgnZmJqcy9saWIvaW52YXJpYW50Jyk7XG5cbmNvbnN0IFRSQUNFX1RBR19SRUFDVF9BUFBTID0gMSA8PCAxNzsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1iaXR3aXNlXG5jb25zdCBUUkFDRV9UQUdfSlNfVk1fQ0FMTFMgPSAxIDw8IDI3OyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLWJpdHdpc2VcblxubGV0IF9lbmFibGVkID0gZmFsc2U7XG5sZXQgX2FzeW5jQ29va2llID0gMDtcbmNvbnN0IF9tYXJrU3RhY2sgPSBbXTtcbmxldCBfbWFya1N0YWNrSW5kZXggPSAtMTtcbmxldCBfY2FuSW5zdGFsbFJlYWN0SG9vayA9IGZhbHNlO1xuXG4vLyBJbXBsZW1lbnRzIGEgc3Vic2V0IG9mIFVzZXIgVGltaW5nIEFQSSBuZWNlc3NhcnkgZm9yIFJlYWN0IG1lYXN1cmVtZW50cy5cbi8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9Vc2VyX1RpbWluZ19BUElcbmNvbnN0IFJFQUNUX01BUktFUiA9ICdcXHUyNjlCJztcbmNvbnN0IHVzZXJUaW1pbmdQb2x5ZmlsbCA9IF9fREVWX19cbiAgPyB7XG4gICAgICBtYXJrKG1hcmtOYW1lOiBzdHJpbmcpIHtcbiAgICAgICAgaWYgKF9lbmFibGVkKSB7XG4gICAgICAgICAgX21hcmtTdGFja0luZGV4Kys7XG4gICAgICAgICAgX21hcmtTdGFja1tfbWFya1N0YWNrSW5kZXhdID0gbWFya05hbWU7XG4gICAgICAgICAgbGV0IHN5c3RyYWNlTGFiZWwgPSBtYXJrTmFtZTtcbiAgICAgICAgICAvLyBTaW5jZSBwZXJmIG1lYXN1cmVtZW50cyBhcmUgYSBzaGFyZWQgbmFtZXNwYWNlIGluIFVzZXIgVGltaW5nIEFQSSxcbiAgICAgICAgICAvLyB3ZSBwcmVmaXggYWxsIFJlYWN0IHJlc3VsdHMgd2l0aCBhIFJlYWN0IGVtb2ppLlxuICAgICAgICAgIGlmIChtYXJrTmFtZVswXSA9PT0gUkVBQ1RfTUFSS0VSKSB7XG4gICAgICAgICAgICAvLyBUaGlzIGlzIGNvbWluZyBmcm9tIFJlYWN0LlxuICAgICAgICAgICAgLy8gUmVtb3ZpbmcgY29tcG9uZW50IElEcyBrZWVwcyB0cmFjZSBjb2xvcnMgc3RhYmxlLlxuICAgICAgICAgICAgY29uc3QgaW5kZXhPZklkID0gbWFya05hbWUubGFzdEluZGV4T2YoJyAoIycpO1xuICAgICAgICAgICAgY29uc3QgY3V0b2ZmSW5kZXggPSBpbmRleE9mSWQgIT09IC0xID8gaW5kZXhPZklkIDogbWFya05hbWUubGVuZ3RoO1xuICAgICAgICAgICAgLy8gQWxzbyBjdXQgb2ZmIHRoZSBlbW9qaSBiZWNhdXNlIGl0IGJyZWFrcyBTeXN0cmFjZVxuICAgICAgICAgICAgc3lzdHJhY2VMYWJlbCA9IG1hcmtOYW1lLnNsaWNlKDIsIGN1dG9mZkluZGV4KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgU3lzdHJhY2UuYmVnaW5FdmVudChzeXN0cmFjZUxhYmVsKTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIG1lYXN1cmUobWVhc3VyZU5hbWU6IHN0cmluZywgc3RhcnRNYXJrOiA/c3RyaW5nLCBlbmRNYXJrOiA/c3RyaW5nKSB7XG4gICAgICAgIGlmIChfZW5hYmxlZCkge1xuICAgICAgICAgIGludmFyaWFudChcbiAgICAgICAgICAgIHR5cGVvZiBtZWFzdXJlTmFtZSA9PT0gJ3N0cmluZycgJiZcbiAgICAgICAgICAgICAgdHlwZW9mIHN0YXJ0TWFyayA9PT0gJ3N0cmluZycgJiZcbiAgICAgICAgICAgICAgdHlwZW9mIGVuZE1hcmsgPT09ICd1bmRlZmluZWQnLFxuICAgICAgICAgICAgJ09ubHkgcGVyZm9ybWFuY2UubWVhc3VyZShzdHJpbmcsIHN0cmluZykgb3ZlcmxvYWQgaXMgc3VwcG9ydGVkLicsXG4gICAgICAgICAgKTtcbiAgICAgICAgICBjb25zdCB0b3BNYXJrID0gX21hcmtTdGFja1tfbWFya1N0YWNrSW5kZXhdO1xuICAgICAgICAgIGludmFyaWFudChcbiAgICAgICAgICAgIHN0YXJ0TWFyayA9PT0gdG9wTWFyayxcbiAgICAgICAgICAgICdUaGVyZSB3YXMgYSBtaXNtYXRjaGluZyBwZXJmb3JtYW5jZS5tZWFzdXJlKCkgY2FsbC4gJyArXG4gICAgICAgICAgICAgICdFeHBlY3RlZCBcIiVzXCIgYnV0IGdvdCBcIiVzLlwiJyxcbiAgICAgICAgICAgIHRvcE1hcmssXG4gICAgICAgICAgICBzdGFydE1hcmssXG4gICAgICAgICAgKTtcbiAgICAgICAgICBfbWFya1N0YWNrSW5kZXgtLTtcbiAgICAgICAgICAvLyBXZSBjYW4ndCB1c2UgbW9yZSBkZXNjcmlwdGl2ZSBtZWFzdXJlTmFtZSBiZWNhdXNlIFN5c3RyYWNlIGRvZXNuJ3RcbiAgICAgICAgICAvLyBsZXQgdXMgZWRpdCBsYWJlbHMgcG9zdCBmYWN0dW0uXG4gICAgICAgICAgU3lzdHJhY2UuZW5kRXZlbnQoKTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIGNsZWFyTWFya3MobWFya05hbWU6IHN0cmluZykge1xuICAgICAgICBpZiAoX2VuYWJsZWQpIHtcbiAgICAgICAgICBpZiAoX21hcmtTdGFja0luZGV4ID09PSAtMSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAobWFya05hbWUgPT09IF9tYXJrU3RhY2tbX21hcmtTdGFja0luZGV4XSkge1xuICAgICAgICAgICAgLy8gUmVhY3QgdXNlcyB0aGlzIGZvciBcImNhbmNlbGxpbmdcIiBzdGFydGVkIG1lYXN1cmVtZW50cy5cbiAgICAgICAgICAgIC8vIFN5c3RyYWNlIGRvZXNuJ3Qgc3VwcG9ydCBkZWxldGluZyBtZWFzdXJlbWVudHMsIHNvIHdlIGp1c3Qgc3RvcCB0aGVtLlxuICAgICAgICAgICAgaWYgKHVzZXJUaW1pbmdQb2x5ZmlsbCAhPSBudWxsKSB7XG4gICAgICAgICAgICAgIHVzZXJUaW1pbmdQb2x5ZmlsbC5tZWFzdXJlKG1hcmtOYW1lLCBtYXJrTmFtZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgY2xlYXJNZWFzdXJlcygpIHtcbiAgICAgICAgLy8gUmVhY3QgY2FsbHMgdGhpcyB0byBhdm9pZCBtZW1vcnkgbGVha3MgaW4gYnJvd3NlcnMsIGJ1dCB3ZSBkb24ndCBrZWVwXG4gICAgICAgIC8vIG1lYXN1cmVtZW50cyBhbnl3YXkuXG4gICAgICB9LFxuICAgIH1cbiAgOiBudWxsO1xuXG5jb25zdCBTeXN0cmFjZSA9IHtcbiAgaW5zdGFsbFJlYWN0SG9vaygpIHtcbiAgICBpZiAoX2VuYWJsZWQpIHtcbiAgICAgIGlmIChfX0RFVl9fKSB7XG4gICAgICAgIGdsb2JhbC5wZXJmb3JtYW5jZSA9IHVzZXJUaW1pbmdQb2x5ZmlsbDtcbiAgICAgIH1cbiAgICB9XG4gICAgX2Nhbkluc3RhbGxSZWFjdEhvb2sgPSB0cnVlO1xuICB9LFxuXG4gIHNldEVuYWJsZWQoZW5hYmxlZDogYm9vbGVhbikge1xuICAgIGlmIChfZW5hYmxlZCAhPT0gZW5hYmxlZCkge1xuICAgICAgaWYgKF9fREVWX18pIHtcbiAgICAgICAgaWYgKGVuYWJsZWQpIHtcbiAgICAgICAgICBnbG9iYWwubmF0aXZlVHJhY2VCZWdpbkxlZ2FjeSAmJlxuICAgICAgICAgICAgZ2xvYmFsLm5hdGl2ZVRyYWNlQmVnaW5MZWdhY3koVFJBQ0VfVEFHX0pTX1ZNX0NBTExTKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBnbG9iYWwubmF0aXZlVHJhY2VFbmRMZWdhY3kgJiZcbiAgICAgICAgICAgIGdsb2JhbC5uYXRpdmVUcmFjZUVuZExlZ2FjeShUUkFDRV9UQUdfSlNfVk1fQ0FMTFMpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChfY2FuSW5zdGFsbFJlYWN0SG9vaykge1xuICAgICAgICAgIGlmIChlbmFibGVkICYmIGdsb2JhbC5wZXJmb3JtYW5jZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBnbG9iYWwucGVyZm9ybWFuY2UgPSB1c2VyVGltaW5nUG9seWZpbGw7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBfZW5hYmxlZCA9IGVuYWJsZWQ7XG4gICAgfVxuICB9LFxuXG4gIGlzRW5hYmxlZCgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gX2VuYWJsZWQ7XG4gIH0sXG5cbiAgLyoqXG4gICAqIGJlZ2luRXZlbnQvZW5kRXZlbnQgZm9yIHN0YXJ0aW5nIGFuZCB0aGVuIGVuZGluZyBhIHByb2ZpbGUgd2l0aGluIHRoZSBzYW1lIGNhbGwgc3RhY2sgZnJhbWVcbiAgICoqL1xuICBiZWdpbkV2ZW50KHByb2ZpbGVOYW1lPzogYW55LCBhcmdzPzogYW55KSB7XG4gICAgaWYgKF9lbmFibGVkKSB7XG4gICAgICBwcm9maWxlTmFtZSA9XG4gICAgICAgIHR5cGVvZiBwcm9maWxlTmFtZSA9PT0gJ2Z1bmN0aW9uJyA/IHByb2ZpbGVOYW1lKCkgOiBwcm9maWxlTmFtZTtcbiAgICAgIGdsb2JhbC5uYXRpdmVUcmFjZUJlZ2luU2VjdGlvbihUUkFDRV9UQUdfUkVBQ1RfQVBQUywgcHJvZmlsZU5hbWUsIGFyZ3MpO1xuICAgIH1cbiAgfSxcblxuICBlbmRFdmVudCgpIHtcbiAgICBpZiAoX2VuYWJsZWQpIHtcbiAgICAgIGdsb2JhbC5uYXRpdmVUcmFjZUVuZFNlY3Rpb24oVFJBQ0VfVEFHX1JFQUNUX0FQUFMpO1xuICAgIH1cbiAgfSxcblxuICAvKipcbiAgICogYmVnaW5Bc3luY0V2ZW50L2VuZEFzeW5jRXZlbnQgZm9yIHN0YXJ0aW5nIGFuZCB0aGVuIGVuZGluZyBhIHByb2ZpbGUgd2hlcmUgdGhlIGVuZCBjYW4gZWl0aGVyXG4gICAqIG9jY3VyIG9uIGFub3RoZXIgdGhyZWFkIG9yIG91dCBvZiB0aGUgY3VycmVudCBzdGFjayBmcmFtZSwgZWcgYXdhaXRcbiAgICogdGhlIHJldHVybmVkIGNvb2tpZSB2YXJpYWJsZSBzaG91bGQgYmUgdXNlZCBhcyBpbnB1dCBpbnRvIHRoZSBlbmRBc3luY0V2ZW50IGNhbGwgdG8gZW5kIHRoZSBwcm9maWxlXG4gICAqKi9cbiAgYmVnaW5Bc3luY0V2ZW50KHByb2ZpbGVOYW1lPzogYW55KTogYW55IHtcbiAgICBjb25zdCBjb29raWUgPSBfYXN5bmNDb29raWU7XG4gICAgaWYgKF9lbmFibGVkKSB7XG4gICAgICBfYXN5bmNDb29raWUrKztcbiAgICAgIHByb2ZpbGVOYW1lID1cbiAgICAgICAgdHlwZW9mIHByb2ZpbGVOYW1lID09PSAnZnVuY3Rpb24nID8gcHJvZmlsZU5hbWUoKSA6IHByb2ZpbGVOYW1lO1xuICAgICAgZ2xvYmFsLm5hdGl2ZVRyYWNlQmVnaW5Bc3luY1NlY3Rpb24oXG4gICAgICAgIFRSQUNFX1RBR19SRUFDVF9BUFBTLFxuICAgICAgICBwcm9maWxlTmFtZSxcbiAgICAgICAgY29va2llLFxuICAgICAgKTtcbiAgICB9XG4gICAgcmV0dXJuIGNvb2tpZTtcbiAgfSxcblxuICBlbmRBc3luY0V2ZW50KHByb2ZpbGVOYW1lPzogYW55LCBjb29raWU/OiBhbnkpIHtcbiAgICBpZiAoX2VuYWJsZWQpIHtcbiAgICAgIHByb2ZpbGVOYW1lID1cbiAgICAgICAgdHlwZW9mIHByb2ZpbGVOYW1lID09PSAnZnVuY3Rpb24nID8gcHJvZmlsZU5hbWUoKSA6IHByb2ZpbGVOYW1lO1xuICAgICAgZ2xvYmFsLm5hdGl2ZVRyYWNlRW5kQXN5bmNTZWN0aW9uKFxuICAgICAgICBUUkFDRV9UQUdfUkVBQ1RfQVBQUyxcbiAgICAgICAgcHJvZmlsZU5hbWUsXG4gICAgICAgIGNvb2tpZSxcbiAgICAgICk7XG4gICAgfVxuICB9LFxuXG4gIC8qKlxuICAgKiBjb3VudGVyRXZlbnQgcmVnaXN0ZXJzIHRoZSB2YWx1ZSB0byB0aGUgcHJvZmlsZU5hbWUgb24gdGhlIHN5c3RyYWNlIHRpbWVsaW5lXG4gICAqKi9cbiAgY291bnRlckV2ZW50KHByb2ZpbGVOYW1lPzogYW55LCB2YWx1ZT86IGFueSkge1xuICAgIGlmIChfZW5hYmxlZCkge1xuICAgICAgcHJvZmlsZU5hbWUgPVxuICAgICAgICB0eXBlb2YgcHJvZmlsZU5hbWUgPT09ICdmdW5jdGlvbicgPyBwcm9maWxlTmFtZSgpIDogcHJvZmlsZU5hbWU7XG4gICAgICBnbG9iYWwubmF0aXZlVHJhY2VDb3VudGVyICYmXG4gICAgICAgIGdsb2JhbC5uYXRpdmVUcmFjZUNvdW50ZXIoVFJBQ0VfVEFHX1JFQUNUX0FQUFMsIHByb2ZpbGVOYW1lLCB2YWx1ZSk7XG4gICAgfVxuICB9LFxufTtcblxuaWYgKF9fREVWX18pIHtcbiAgLy8gVGhpcyBpcyBuZWVkZWQsIGJlY2F1c2UgcmVxdWlyZSBjYWxsaXMgaW4gcG9seWZpbGxzIGFyZSBub3QgcHJvY2Vzc2VkIGFzXG4gIC8vIG90aGVyIGZpbGVzLiBUaGVyZWZvcmUsIGNhbGxzIHRvIGByZXF1aXJlKCdtb2R1bGVJZCcpYCBhcmUgbm90IHJlcGxhY2VkXG4gIC8vIHdpdGggbnVtZXJpYyBJRHNcbiAgLy8gVE9ETyhkYXZpZGF1cmVsaW8pIFNjYW4gcG9seWZpbGxzIGZvciBkZXBlbmRlbmNpZXMsIHRvbyAodDk3NTk2ODYpXG4gIChyZXF1aXJlOiBhbnkpLlN5c3RyYWNlID0gU3lzdHJhY2U7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gU3lzdHJhY2U7XG4iXX0=