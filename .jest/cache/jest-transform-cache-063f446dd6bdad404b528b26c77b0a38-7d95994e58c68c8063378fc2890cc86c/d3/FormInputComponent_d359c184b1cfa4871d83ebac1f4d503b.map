{"file":"/Users/davidmurphy/Desktop/MoneySender/src/Send/FormInputComponent.tsx","mappings":";;;;;;;;;;;;AAAA,+CAAwC;AACxC,sEAA6C;AAC7C,6CAAyC;AAEzC,MAAM,SAAS,GAAG,gBAAM,CAAC,IAAI,CAAA;;;WAGjB,eAAM,CAAC,KAAM;CACxB,CAAA;AACD,MAAM,UAAU,GAAG,gBAAM,CAAC,IAAI,CAAA;;;WAGlB,eAAM,CAAC,GAAI;;CAEtB,CAAA;AAED,MAAM,eAAe,GAAG,gBAAM,CAAC,IAAI,CAAA;;WAEvB,eAAM,CAAC,KAAM;CACxB,CAAA;AAED,MAAM,SAAS,GAAG,gBAAM,CAAC,SAAS,CAAwC;;;;aAI5D,eAAM,CAAC,KAAM;CAC1B,CAAA;AACD,MAAM,kBAAkB,GAAG,gBAAM,CAAC,IAAI,CAAA;;;CAGrC,CAAA;AACD,MAAM,sBAAsB,GAAG,gBAAM,CAAC,IAAI,CAAwC;;;;kBAI/D,CAAC,KAAK,EAAE,EAAE;IAC3B,IAAI,KAAK,CAAC,SAAS,IAAI,IAAI,EAAE;QAC3B,OAAO,eAAM,CAAC,IAAI,CAAA;KACnB;IACD,IAAI,KAAK,CAAC,OAAO,IAAI,KAAK,EAAE;QAC1B,OAAO,eAAM,CAAC,GAAG,CAAA;KAClB;IACD,OAAO,eAAM,CAAC,SAAS,CAAA;AACzB,CAAE;CACD,CAAA;AAqBD,MAAqB,kBAAmB,SAAQ,iBAAoC;IAApF;;QAEI,UAAK,GAAG;YACN,SAAS,EAAE,KAAK;SACjB,CAAA;IA0BL,CAAC;IAxBG,MAAM;QACJ,MAAM,EAAE,UAAU,EAAE,KAAK,EAAE,OAAO,EAAE,MAAM,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAA;QAC9D,OAAO,8BAAC,kBAAkB;YACxB,8BAAC,SAAS,QAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,CAAe;YACjD,8BAAC,sBAAsB,IAAC,OAAO,EAAG,OAAO,EAAG,SAAS,EAAG,IAAI,CAAC,KAAK,CAAC,SAAS;gBAC3E,8BAAC,eAAe,QACb,MAAM,CACS;gBACnB,8BAAC,SAAS,IACN,KAAK,EAAG,KAAK,EACb,OAAO,EAAG,GAAG,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC,EAClD,MAAM,EAAG,GAAG,EAAE;wBACZ,IAAI,CAAC,QAAQ,CAAC,EAAE,SAAS,EAAE,KAAK,EAAE,CAAC,CAAA;wBACnC,IAAI,CAAC,KAAK,CAAC,QAAQ,mBAAM,IAAI,CAAC,KAAK,CAAC,IAAI,IAAE,OAAO,EAAE,UAAU,CAAE,KAAK,CAAE,IAAG,CAAA;oBAC3E,CAAC,EACD,YAAY,EAAG,CAAC,IAAI,EAAE,EAAE;wBACtB,IAAI,CAAC,KAAK,CAAC,QAAQ,mBAAM,IAAI,CAAC,KAAK,CAAC,IAAI,IAAE,KAAK,EAAE,IAAI,EAAE,OAAO,EAAE,UAAU,CAAE,IAAI,CAAE,IAAG,CAAA;oBACvF,CAAC,GACD,CACwB;YAC1B,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,OAAO,KAAK,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,SAAS;gBAC1D,8BAAC,UAAU,QAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,WAAW,CAAgB,CACzC,CAAA;IACxB,CAAC;CACJ;AA9BD,qCA8BC","names":[],"sources":["/Users/davidmurphy/Desktop/MoneySender/src/Send/FormInputComponent.tsx"],"sourcesContent":["import React, { Component } from 'react'\nimport styled from 'styled-components/native'\nimport { colors } from '../Themes/colors'\n\nconst FormTitle = styled.Text`\n  font-size: 15px;\n  font-family: System;\n  color: ${ colors.title }\n`\nconst ErrorTitle = styled.Text`\n  font-size: 15px;\n  font-family: System;\n  color: ${ colors.red };\n  margin-top: 10px;\n`\n\nconst FormInputPrefix = styled.Text`\n  font-size: 20px;\n  color: ${ colors.title };\n`\n\nconst FormInput = styled.TextInput<{modifying: boolean, isValid: boolean}>`\n    height: 42px;\n    width: 100%;\n    font-size: 20px;\n    color: ${ colors.title };\n`\nconst FormInputContainer = styled.View`\n    width: 100%;\n    margin-top: 36px;\n`\nconst FormTextInputContainer = styled.View<{modifying: boolean, isValid: boolean}>`\n  flex-direction: row;\n  align-items: center;\n  border-bottom-width: 1px;\n  border-color: ${ (props) => {\n  if (props.modifying == true) {\n    return colors.blue\n  }\n  if (props.isValid == false) {\n    return colors.red\n  }\n  return colors.lightGrey\n} };\n`\n\nexport interface FormInput {\n  title: string\n  key: string\n  isValid?: boolean\n  value?: string\n  prefix?: string\n  errorString: string\n  validation: (value?: string) => boolean\n}\n\ninterface FormProps {\n  form: FormInput\n  onChange: (value: FormInput) => void\n}\n\ninterface FormInputState {\n  isFocused: boolean\n}\n\nexport default class FormInputComponent extends Component<FormProps, FormInputState> {\n\n    state = {\n      isFocused: false\n    }\n\n    render() {\n      const { validation, value, isValid, prefix } = this.props.form\n      return <FormInputContainer>\n        <FormTitle>{ this.props.form.title }</ FormTitle>\n        <FormTextInputContainer isValid={ isValid } modifying={ this.state.isFocused }>\n         <FormInputPrefix>\n          { prefix }\n        </ FormInputPrefix>\n        <FormInput\n            value={ value }\n            onFocus={ () => this.setState({ isFocused: true }) }\n            onBlur={ () => {\n              this.setState({ isFocused: false })\n              this.props.onChange({ ...this.props.form, isValid: validation( value ) })\n            } }\n            onChangeText={ (text) => {\n              this.props.onChange({ ...this.props.form, value: text, isValid: validation( text ) })\n            }}\n          />\n          </ FormTextInputContainer>\n        { (this.props.form.isValid === false) && !this.state.isFocused &&\n            <ErrorTitle>{ this.props.form.errorString }</ ErrorTitle> }\n      </ FormInputContainer>\n    }\n}"],"version":3}