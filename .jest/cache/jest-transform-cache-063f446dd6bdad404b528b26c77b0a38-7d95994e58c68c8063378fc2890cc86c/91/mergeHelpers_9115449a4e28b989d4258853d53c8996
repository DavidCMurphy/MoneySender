98771ea89626e82daaef7afd353ddfaa
'use strict';

var invariant = require('fbjs/lib/invariant');

var MAX_MERGE_DEPTH = 36;

var isTerminal = function isTerminal(o) {
  return typeof o !== 'object' || o instanceof Date || o === null;
};

var mergeHelpers = {
  MAX_MERGE_DEPTH: MAX_MERGE_DEPTH,
  isTerminal: isTerminal,
  normalizeMergeArg: function normalizeMergeArg(arg) {
    return arg === undefined || arg === null ? {} : arg;
  },
  checkMergeArrayArgs: function checkMergeArrayArgs(one, two) {
    invariant(Array.isArray(one) && Array.isArray(two), 'Tried to merge arrays, instead got %s and %s.', one, two);
  },
  checkMergeObjectArgs: function checkMergeObjectArgs(one, two) {
    mergeHelpers.checkMergeObjectArg(one);
    mergeHelpers.checkMergeObjectArg(two);
  },
  checkMergeObjectArg: function checkMergeObjectArg(arg) {
    invariant(!isTerminal(arg) && !Array.isArray(arg), 'Tried to merge an object, instead got %s.', arg);
  },
  checkMergeIntoObjectArg: function checkMergeIntoObjectArg(arg) {
    invariant((!isTerminal(arg) || typeof arg === 'function') && !Array.isArray(arg), 'Tried to merge into an object, instead got %s.', arg);
  },
  checkMergeLevel: function checkMergeLevel(level) {
    invariant(level < MAX_MERGE_DEPTH, 'Maximum deep merge depth exceeded. You may be attempting to merge ' + 'circular structures in an unsupported way.');
  },
  checkArrayStrategy: function checkArrayStrategy(strategy) {
    invariant(strategy === undefined || strategy in mergeHelpers.ArrayStrategies, 'You must provide an array strategy to deep merge functions to ' + 'instruct the deep merge how to resolve merging two arrays.');
  },
  ArrayStrategies: {
    Clobber: 'Clobber',
    Concat: 'Concat',
    IndexByIndex: 'IndexByIndex'
  }
};
module.exports = mergeHelpers;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1lcmdlSGVscGVycy5qcyJdLCJuYW1lcyI6WyJpbnZhcmlhbnQiLCJyZXF1aXJlIiwiTUFYX01FUkdFX0RFUFRIIiwiaXNUZXJtaW5hbCIsIm8iLCJEYXRlIiwibWVyZ2VIZWxwZXJzIiwibm9ybWFsaXplTWVyZ2VBcmciLCJhcmciLCJ1bmRlZmluZWQiLCJjaGVja01lcmdlQXJyYXlBcmdzIiwib25lIiwidHdvIiwiQXJyYXkiLCJpc0FycmF5IiwiY2hlY2tNZXJnZU9iamVjdEFyZ3MiLCJjaGVja01lcmdlT2JqZWN0QXJnIiwiY2hlY2tNZXJnZUludG9PYmplY3RBcmciLCJjaGVja01lcmdlTGV2ZWwiLCJsZXZlbCIsImNoZWNrQXJyYXlTdHJhdGVneSIsInN0cmF0ZWd5IiwiQXJyYXlTdHJhdGVnaWVzIiwiQ2xvYmJlciIsIkNvbmNhdCIsIkluZGV4QnlJbmRleCIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQVlBOztBQUVBLElBQU1BLFNBQVMsR0FBR0MsT0FBTyxDQUFDLG9CQUFELENBQXpCOztBQU1BLElBQU1DLGVBQWUsR0FBRyxFQUF4Qjs7QUFRQSxJQUFNQyxVQUFVLEdBQUcsU0FBYkEsVUFBYSxDQUFTQyxDQUFULEVBQVk7QUFDN0IsU0FBTyxPQUFPQSxDQUFQLEtBQWEsUUFBYixJQUF5QkEsQ0FBQyxZQUFZQyxJQUF0QyxJQUE4Q0QsQ0FBQyxLQUFLLElBQTNEO0FBQ0QsQ0FGRDs7QUFJQSxJQUFNRSxZQUFZLEdBQUc7QUFDbkJKLEVBQUFBLGVBQWUsRUFBRUEsZUFERTtBQUduQkMsRUFBQUEsVUFBVSxFQUFFQSxVQUhPO0FBV25CSSxFQUFBQSxpQkFBaUIsRUFBRSwyQkFBU0MsR0FBVCxFQUFjO0FBQy9CLFdBQU9BLEdBQUcsS0FBS0MsU0FBUixJQUFxQkQsR0FBRyxLQUFLLElBQTdCLEdBQW9DLEVBQXBDLEdBQXlDQSxHQUFoRDtBQUNELEdBYmtCO0FBdUJuQkUsRUFBQUEsbUJBQW1CLEVBQUUsNkJBQVNDLEdBQVQsRUFBY0MsR0FBZCxFQUFtQjtBQUN0Q1osSUFBQUEsU0FBUyxDQUNQYSxLQUFLLENBQUNDLE9BQU4sQ0FBY0gsR0FBZCxLQUFzQkUsS0FBSyxDQUFDQyxPQUFOLENBQWNGLEdBQWQsQ0FEZixFQUVQLCtDQUZPLEVBR1BELEdBSE8sRUFJUEMsR0FKTyxDQUFUO0FBTUQsR0E5QmtCO0FBb0NuQkcsRUFBQUEsb0JBQW9CLEVBQUUsOEJBQVNKLEdBQVQsRUFBY0MsR0FBZCxFQUFtQjtBQUN2Q04sSUFBQUEsWUFBWSxDQUFDVSxtQkFBYixDQUFpQ0wsR0FBakM7QUFDQUwsSUFBQUEsWUFBWSxDQUFDVSxtQkFBYixDQUFpQ0osR0FBakM7QUFDRCxHQXZDa0I7QUE0Q25CSSxFQUFBQSxtQkFBbUIsRUFBRSw2QkFBU1IsR0FBVCxFQUFjO0FBQ2pDUixJQUFBQSxTQUFTLENBQ1AsQ0FBQ0csVUFBVSxDQUFDSyxHQUFELENBQVgsSUFBb0IsQ0FBQ0ssS0FBSyxDQUFDQyxPQUFOLENBQWNOLEdBQWQsQ0FEZCxFQUVQLDJDQUZPLEVBR1BBLEdBSE8sQ0FBVDtBQUtELEdBbERrQjtBQXVEbkJTLEVBQUFBLHVCQUF1QixFQUFFLGlDQUFTVCxHQUFULEVBQWM7QUFDckNSLElBQUFBLFNBQVMsQ0FDUCxDQUFDLENBQUNHLFVBQVUsQ0FBQ0ssR0FBRCxDQUFYLElBQW9CLE9BQU9BLEdBQVAsS0FBZSxVQUFwQyxLQUFtRCxDQUFDSyxLQUFLLENBQUNDLE9BQU4sQ0FBY04sR0FBZCxDQUQ3QyxFQUVQLGdEQUZPLEVBR1BBLEdBSE8sQ0FBVDtBQUtELEdBN0RrQjtBQXFFbkJVLEVBQUFBLGVBQWUsRUFBRSx5QkFBU0MsS0FBVCxFQUFnQjtBQUMvQm5CLElBQUFBLFNBQVMsQ0FDUG1CLEtBQUssR0FBR2pCLGVBREQsRUFFUCx1RUFDRSw0Q0FISyxDQUFUO0FBS0QsR0EzRWtCO0FBa0ZuQmtCLEVBQUFBLGtCQUFrQixFQUFFLDRCQUFTQyxRQUFULEVBQW1CO0FBQ3JDckIsSUFBQUEsU0FBUyxDQUNQcUIsUUFBUSxLQUFLWixTQUFiLElBQTBCWSxRQUFRLElBQUlmLFlBQVksQ0FBQ2dCLGVBRDVDLEVBRVAsbUVBQ0UsNERBSEssQ0FBVDtBQUtELEdBeEZrQjtBQWlHbkJBLEVBQUFBLGVBQWUsRUFBRTtBQUNmQyxJQUFBQSxPQUFPLEVBQUUsU0FETTtBQUVmQyxJQUFBQSxNQUFNLEVBQUUsUUFGTztBQUdmQyxJQUFBQSxZQUFZLEVBQUU7QUFIQztBQWpHRSxDQUFyQjtBQXdHQUMsTUFBTSxDQUFDQyxPQUFQLEdBQWlCckIsWUFBakIiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqXG4gKiByZXF1aXJlc1BvbHlmaWxsczogQXJyYXkuaXNBcnJheVxuICpcbiAqIEBmb3JtYXRcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbmNvbnN0IGludmFyaWFudCA9IHJlcXVpcmUoJ2ZianMvbGliL2ludmFyaWFudCcpO1xuXG4vKipcbiAqIE1heGltdW0gbnVtYmVyIG9mIGxldmVscyB0byB0cmF2ZXJzZS4gV2lsbCBjYXRjaCBjaXJjdWxhciBzdHJ1Y3R1cmVzLlxuICogQGNvbnN0XG4gKi9cbmNvbnN0IE1BWF9NRVJHRV9ERVBUSCA9IDM2O1xuXG4vKipcbiAqIFdlIHdvbid0IHdvcnJ5IGFib3V0IGVkZ2UgY2FzZXMgbGlrZSBuZXcgU3RyaW5nKCd4Jykgb3IgbmV3IEJvb2xlYW4odHJ1ZSkuXG4gKiBGdW5jdGlvbnMgYW5kIERhdGVzIGFyZSBjb25zaWRlcmVkIHRlcm1pbmFscywgYW5kIGFycmF5cyBhcmUgbm90LlxuICogQHBhcmFtIHsqfSBvIFRoZSBpdGVtL29iamVjdC92YWx1ZSB0byB0ZXN0LlxuICogQHJldHVybiB7Ym9vbGVhbn0gdHJ1ZSBpZmYgdGhlIGFyZ3VtZW50IGlzIGEgdGVybWluYWwuXG4gKi9cbmNvbnN0IGlzVGVybWluYWwgPSBmdW5jdGlvbihvKSB7XG4gIHJldHVybiB0eXBlb2YgbyAhPT0gJ29iamVjdCcgfHwgbyBpbnN0YW5jZW9mIERhdGUgfHwgbyA9PT0gbnVsbDtcbn07XG5cbmNvbnN0IG1lcmdlSGVscGVycyA9IHtcbiAgTUFYX01FUkdFX0RFUFRIOiBNQVhfTUVSR0VfREVQVEgsXG5cbiAgaXNUZXJtaW5hbDogaXNUZXJtaW5hbCxcblxuICAvKipcbiAgICogQ29udmVydHMgbnVsbC91bmRlZmluZWQgdmFsdWVzIGludG8gZW1wdHkgb2JqZWN0LlxuICAgKlxuICAgKiBAcGFyYW0gez9PYmplY3Q9fSBhcmcgQXJndW1lbnQgdG8gYmUgbm9ybWFsaXplZCAobnVsbGFibGUgb3B0aW9uYWwpXG4gICAqIEByZXR1cm4geyFPYmplY3R9XG4gICAqL1xuICBub3JtYWxpemVNZXJnZUFyZzogZnVuY3Rpb24oYXJnKSB7XG4gICAgcmV0dXJuIGFyZyA9PT0gdW5kZWZpbmVkIHx8IGFyZyA9PT0gbnVsbCA/IHt9IDogYXJnO1xuICB9LFxuXG4gIC8qKlxuICAgKiBJZiBtZXJnaW5nIEFycmF5cywgYSBtZXJnZSBzdHJhdGVneSAqbXVzdCogYmUgc3VwcGxpZWQuIElmIG5vdCwgaXQgaXNcbiAgICogbGlrZWx5IHRoZSBjYWxsZXIncyBmYXVsdC4gSWYgdGhpcyBmdW5jdGlvbiBpcyBldmVyIGNhbGxlZCB3aXRoIGFueXRoaW5nXG4gICAqIGJ1dCBgb25lYCBhbmQgYHR3b2AgYmVpbmcgYEFycmF5YHMsIGl0IGlzIHRoZSBmYXVsdCBvZiB0aGUgbWVyZ2UgdXRpbGl0aWVzLlxuICAgKlxuICAgKiBAcGFyYW0geyp9IG9uZSBBcnJheSB0byBtZXJnZSBpbnRvLlxuICAgKiBAcGFyYW0geyp9IHR3byBBcnJheSB0byBtZXJnZSBmcm9tLlxuICAgKi9cbiAgY2hlY2tNZXJnZUFycmF5QXJnczogZnVuY3Rpb24ob25lLCB0d28pIHtcbiAgICBpbnZhcmlhbnQoXG4gICAgICBBcnJheS5pc0FycmF5KG9uZSkgJiYgQXJyYXkuaXNBcnJheSh0d28pLFxuICAgICAgJ1RyaWVkIHRvIG1lcmdlIGFycmF5cywgaW5zdGVhZCBnb3QgJXMgYW5kICVzLicsXG4gICAgICBvbmUsXG4gICAgICB0d28sXG4gICAgKTtcbiAgfSxcblxuICAvKipcbiAgICogQHBhcmFtIHsqfSBvbmUgT2JqZWN0IHRvIG1lcmdlIGludG8uXG4gICAqIEBwYXJhbSB7Kn0gdHdvIE9iamVjdCB0byBtZXJnZSBmcm9tLlxuICAgKi9cbiAgY2hlY2tNZXJnZU9iamVjdEFyZ3M6IGZ1bmN0aW9uKG9uZSwgdHdvKSB7XG4gICAgbWVyZ2VIZWxwZXJzLmNoZWNrTWVyZ2VPYmplY3RBcmcob25lKTtcbiAgICBtZXJnZUhlbHBlcnMuY2hlY2tNZXJnZU9iamVjdEFyZyh0d28pO1xuICB9LFxuXG4gIC8qKlxuICAgKiBAcGFyYW0geyp9IGFyZ1xuICAgKi9cbiAgY2hlY2tNZXJnZU9iamVjdEFyZzogZnVuY3Rpb24oYXJnKSB7XG4gICAgaW52YXJpYW50KFxuICAgICAgIWlzVGVybWluYWwoYXJnKSAmJiAhQXJyYXkuaXNBcnJheShhcmcpLFxuICAgICAgJ1RyaWVkIHRvIG1lcmdlIGFuIG9iamVjdCwgaW5zdGVhZCBnb3QgJXMuJyxcbiAgICAgIGFyZyxcbiAgICApO1xuICB9LFxuXG4gIC8qKlxuICAgKiBAcGFyYW0geyp9IGFyZ1xuICAgKi9cbiAgY2hlY2tNZXJnZUludG9PYmplY3RBcmc6IGZ1bmN0aW9uKGFyZykge1xuICAgIGludmFyaWFudChcbiAgICAgICghaXNUZXJtaW5hbChhcmcpIHx8IHR5cGVvZiBhcmcgPT09ICdmdW5jdGlvbicpICYmICFBcnJheS5pc0FycmF5KGFyZyksXG4gICAgICAnVHJpZWQgdG8gbWVyZ2UgaW50byBhbiBvYmplY3QsIGluc3RlYWQgZ290ICVzLicsXG4gICAgICBhcmcsXG4gICAgKTtcbiAgfSxcblxuICAvKipcbiAgICogQ2hlY2tzIHRoYXQgYSBtZXJnZSB3YXMgbm90IGdpdmVuIGEgY2lyY3VsYXIgb2JqZWN0IG9yIGFuIG9iamVjdCB0aGF0IGhhZFxuICAgKiB0b28gZ3JlYXQgb2YgZGVwdGguXG4gICAqXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBMZXZlbCBvZiByZWN1cnNpb24gdG8gdmFsaWRhdGUgYWdhaW5zdCBtYXhpbXVtLlxuICAgKi9cbiAgY2hlY2tNZXJnZUxldmVsOiBmdW5jdGlvbihsZXZlbCkge1xuICAgIGludmFyaWFudChcbiAgICAgIGxldmVsIDwgTUFYX01FUkdFX0RFUFRILFxuICAgICAgJ01heGltdW0gZGVlcCBtZXJnZSBkZXB0aCBleGNlZWRlZC4gWW91IG1heSBiZSBhdHRlbXB0aW5nIHRvIG1lcmdlICcgK1xuICAgICAgICAnY2lyY3VsYXIgc3RydWN0dXJlcyBpbiBhbiB1bnN1cHBvcnRlZCB3YXkuJyxcbiAgICApO1xuICB9LFxuXG4gIC8qKlxuICAgKiBDaGVja3MgdGhhdCB0aGUgc3VwcGxpZWQgbWVyZ2Ugc3RyYXRlZ3kgaXMgdmFsaWQuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBBcnJheSBtZXJnZSBzdHJhdGVneS5cbiAgICovXG4gIGNoZWNrQXJyYXlTdHJhdGVneTogZnVuY3Rpb24oc3RyYXRlZ3kpIHtcbiAgICBpbnZhcmlhbnQoXG4gICAgICBzdHJhdGVneSA9PT0gdW5kZWZpbmVkIHx8IHN0cmF0ZWd5IGluIG1lcmdlSGVscGVycy5BcnJheVN0cmF0ZWdpZXMsXG4gICAgICAnWW91IG11c3QgcHJvdmlkZSBhbiBhcnJheSBzdHJhdGVneSB0byBkZWVwIG1lcmdlIGZ1bmN0aW9ucyB0byAnICtcbiAgICAgICAgJ2luc3RydWN0IHRoZSBkZWVwIG1lcmdlIGhvdyB0byByZXNvbHZlIG1lcmdpbmcgdHdvIGFycmF5cy4nLFxuICAgICk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFNldCBvZiBwb3NzaWJsZSBiZWhhdmlvcnMgb2YgbWVyZ2UgYWxnb3JpdGhtcyB3aGVuIGVuY291bnRlcmluZyB0d28gQXJyYXlzXG4gICAqIHRoYXQgbXVzdCBiZSBtZXJnZWQgdG9nZXRoZXIuXG4gICAqIC0gYGNsb2JiZXJgOiBUaGUgbGVmdCBgQXJyYXlgIGlzIGlnbm9yZWQuXG4gICAqIC0gYGluZGV4QnlJbmRleGA6IFRoZSByZXN1bHQgaXMgYWNoaWV2ZWQgYnkgcmVjdXJzaXZlbHkgZGVlcCBtZXJnaW5nIGF0XG4gICAqICAgZWFjaCBpbmRleC4gKG5vdCB5ZXQgc3VwcG9ydGVkLilcbiAgICovXG4gIEFycmF5U3RyYXRlZ2llczoge1xuICAgIENsb2JiZXI6ICdDbG9iYmVyJyxcbiAgICBDb25jYXQ6ICdDb25jYXQnLFxuICAgIEluZGV4QnlJbmRleDogJ0luZGV4QnlJbmRleCcsXG4gIH0sXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IG1lcmdlSGVscGVycztcbiJdfQ==