{"file":"/Users/davidmurphy/Desktop/MoneySender/src/Send/Epics/index.tsx","mappings":";;AACA,uDAA8E;AAC9E,mDAA6C;AAM7C,+BAA8C;AAC9C,8CAAiD;AAIpC,QAAA,UAAU,GAAG,OAAO,CAAC;AACrB,QAAA,YAAY,GAAG,oBAAoB,CAAC;AAEpC,QAAA,aAAa,GAAG,CAC3B,MAAiC,EACjC,KAA6B,EAC7B,EAAE,CACF,MAAM,CAAC,IAAI,CACT,yBAAM,CAAC,sBAAQ,CAAC,UAAU,CAAC,EAC3B,oBAAQ,CACN,CACE,OAAwB,EAGxB,EAAE;IACF,IAAI,KAAK,GAAG,KAAK,CAAC,KAAK,CAAC;IACxB,IAAI,KAAK,GAAG,KAAK,CAAC,OAAO,CAAC,cAAc,CAAC;IACzC,IAAI,MAAM,GAAG,CAAC,OAAO,CAAC,WAAW,CAAC,MAAM,CAAC;IACzC,OAAO,KAAK,GAAG,MAAM,IAAI,CAAC;QACxB,CAAC,CAAC,SAAE,CAAyB;YACzB,IAAI,EAAE,sBAAQ,CAAC,kBAAkB;YACjC,WAAW,EAAE,OAAO,CAAC,WAAW;SACjC,CAAC;QACJ,CAAC,CAAC,aAAM,CACJ,SAAE,CAAsB,EAAE,IAAI,EAAE,sBAAQ,CAAC,eAAe,EAAE,CAAC,CAC5D,CAAC;AACR,CAAC,CACF,EACD,iBAAK,CAAC,IAAI,CAAC,CACZ,CAAC;AAES,QAAA,cAAc,GAAG,CAAC,MAAiC,EAAE,EAAE,CAClE,MAAM,CAAC,IAAI,CACT,yBAAM,CAAC,sBAAQ,CAAC,eAAe,CAAC,EAChC,oBAAQ,CACN,GAA4B,EAAE,CAC5B,SAAE,CAAc;IACd,IAAI,EAAE,sBAAQ,CAAC,UAAU;IACzB,KAAK,EAAE,OAAO;IACd,OAAO,EAAE,oBAAoB;CAC9B,CAAC,CACL,CACF,CAAC","names":[],"sources":["/Users/davidmurphy/Desktop/MoneySender/src/Send/Epics/index.tsx"],"sourcesContent":["import { Action } from \"redux\";\nimport { ofType, ActionsObservable, StateObservable } from \"redux-observable\";\nimport { TypeKeys } from \"../../ActionTypes\";\nimport {\n  SendMoneyAction,\n  SendMoneyActionSuccess,\n  SendMoneyActionFail\n} from \"../Reducers\";\nimport { of, concat, Observable } from \"rxjs\";\nimport { mergeMap, delay } from \"rxjs/operators\";\nimport { ErrorAction } from \"../../Error\";\nimport { State } from \"../../App\";\n\nexport const errorTitle = \"Error\";\nexport const errorMessage = \"Insufficient funds\";\n\nexport const SendMoneyEpic = (\n  action: ActionsObservable<Action>,\n  store: StateObservable<State>\n) =>\n  action.pipe(\n    ofType(TypeKeys.SEND_MONEY),\n    mergeMap(\n      (\n        action$: SendMoneyAction\n      ): Observable<\n        SendMoneyActionSuccess | ErrorAction | SendMoneyActionFail\n      > => {\n        let state = store.value;\n        let total = state.account.totalAvailable;\n        let amount = +action$.transaction.amount;\n        return total - amount >= 0\n          ? of<SendMoneyActionSuccess>({\n              type: TypeKeys.SEND_MONEY_SUCCESS,\n              transaction: action$.transaction\n            })\n          : concat(\n              of<SendMoneyActionFail>({ type: TypeKeys.SEND_MONEY_FAIL })\n            );\n      }\n    ),\n    delay(3000)\n  );\n\nexport const FailedSendEpic = (action: ActionsObservable<Action>) =>\n  action.pipe(\n    ofType(TypeKeys.SEND_MONEY_FAIL),\n    mergeMap(\n      (): Observable<ErrorAction> =>\n        of<ErrorAction>({\n          type: TypeKeys.SHOW_ERROR,\n          title: \"Error\",\n          message: \"Insufficient funds\"\n        })\n    )\n  );\n"],"version":3}