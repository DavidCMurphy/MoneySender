8bd1f034024963b29a78005057a022b0
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread"));

var DeprecatedEdgeInsetsPropType = require('DeprecatedEdgeInsetsPropType');

var PlatformViewPropTypes = require('PlatformViewPropTypes');

var PropTypes = require('prop-types');

var DeprecatedStyleSheetPropType = require('DeprecatedStyleSheetPropType');

var DeprecatedViewStylePropTypes = require('DeprecatedViewStylePropTypes');

var _require = require('DeprecatedViewAccessibility'),
    DeprecatedAccessibilityComponentTypes = _require.DeprecatedAccessibilityComponentTypes,
    DeprecatedAccessibilityTraits = _require.DeprecatedAccessibilityTraits,
    DeprecatedAccessibilityRoles = _require.DeprecatedAccessibilityRoles,
    DeprecatedAccessibilityStates = _require.DeprecatedAccessibilityStates;

var stylePropType = DeprecatedStyleSheetPropType(DeprecatedViewStylePropTypes);
module.exports = (0, _objectSpread2.default)({
  accessible: PropTypes.bool,
  accessibilityLabel: PropTypes.node,
  accessibilityHint: PropTypes.string,
  accessibilityActions: PropTypes.arrayOf(PropTypes.string),
  accessibilityIgnoresInvertColors: PropTypes.bool,
  accessibilityComponentType: PropTypes.oneOf(DeprecatedAccessibilityComponentTypes),
  accessibilityRole: PropTypes.oneOf(DeprecatedAccessibilityRoles),
  accessibilityStates: PropTypes.arrayOf(PropTypes.oneOf(DeprecatedAccessibilityStates)),
  accessibilityLiveRegion: PropTypes.oneOf(['none', 'polite', 'assertive']),
  importantForAccessibility: PropTypes.oneOf(['auto', 'yes', 'no', 'no-hide-descendants']),
  accessibilityTraits: PropTypes.oneOfType([PropTypes.oneOf(DeprecatedAccessibilityTraits), PropTypes.arrayOf(PropTypes.oneOf(DeprecatedAccessibilityTraits))]),
  accessibilityViewIsModal: PropTypes.bool,
  accessibilityElementsHidden: PropTypes.bool,
  onAccessibilityAction: PropTypes.func,
  onAccessibilityTap: PropTypes.func,
  onMagicTap: PropTypes.func,
  testID: PropTypes.string,
  nativeID: PropTypes.string,
  onResponderGrant: PropTypes.func,
  onResponderMove: PropTypes.func,
  onResponderReject: PropTypes.func,
  onResponderRelease: PropTypes.func,
  onResponderTerminate: PropTypes.func,
  onResponderTerminationRequest: PropTypes.func,
  onStartShouldSetResponder: PropTypes.func,
  onStartShouldSetResponderCapture: PropTypes.func,
  onMoveShouldSetResponder: PropTypes.func,
  onMoveShouldSetResponderCapture: PropTypes.func,
  hitSlop: DeprecatedEdgeInsetsPropType,
  onLayout: PropTypes.func,
  pointerEvents: PropTypes.oneOf(['box-none', 'none', 'box-only', 'auto']),
  style: stylePropType,
  removeClippedSubviews: PropTypes.bool,
  renderToHardwareTextureAndroid: PropTypes.bool,
  shouldRasterizeIOS: PropTypes.bool,
  collapsable: PropTypes.bool,
  needsOffscreenAlphaCompositing: PropTypes.bool
}, PlatformViewPropTypes);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,